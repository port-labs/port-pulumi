// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package port

import (
	"context"
	"reflect"

	"errors"
	"github.com/port-labs/pulumi-port/sdk/go/port/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AggregationProperties struct {
	pulumi.CustomResourceState

	// The identifier of the blueprint the aggregation property will be added to
	BlueprintIdentifier pulumi.StringOutput `pulumi:"blueprintIdentifier"`
	// The aggregation property of the blueprint
	Properties AggregationPropertiesPropertiesMapOutput `pulumi:"properties"`
}

// NewAggregationProperties registers a new resource with the given unique name, arguments, and options.
func NewAggregationProperties(ctx *pulumi.Context,
	name string, args *AggregationPropertiesArgs, opts ...pulumi.ResourceOption) (*AggregationProperties, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BlueprintIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'BlueprintIdentifier'")
	}
	if args.Properties == nil {
		return nil, errors.New("invalid value for required argument 'Properties'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AggregationProperties
	err := ctx.RegisterResource("port:index/aggregationProperties:AggregationProperties", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAggregationProperties gets an existing AggregationProperties resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAggregationProperties(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AggregationPropertiesState, opts ...pulumi.ResourceOption) (*AggregationProperties, error) {
	var resource AggregationProperties
	err := ctx.ReadResource("port:index/aggregationProperties:AggregationProperties", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AggregationProperties resources.
type aggregationPropertiesState struct {
	// The identifier of the blueprint the aggregation property will be added to
	BlueprintIdentifier *string `pulumi:"blueprintIdentifier"`
	// The aggregation property of the blueprint
	Properties map[string]AggregationPropertiesProperties `pulumi:"properties"`
}

type AggregationPropertiesState struct {
	// The identifier of the blueprint the aggregation property will be added to
	BlueprintIdentifier pulumi.StringPtrInput
	// The aggregation property of the blueprint
	Properties AggregationPropertiesPropertiesMapInput
}

func (AggregationPropertiesState) ElementType() reflect.Type {
	return reflect.TypeOf((*aggregationPropertiesState)(nil)).Elem()
}

type aggregationPropertiesArgs struct {
	// The identifier of the blueprint the aggregation property will be added to
	BlueprintIdentifier string `pulumi:"blueprintIdentifier"`
	// The aggregation property of the blueprint
	Properties map[string]AggregationPropertiesProperties `pulumi:"properties"`
}

// The set of arguments for constructing a AggregationProperties resource.
type AggregationPropertiesArgs struct {
	// The identifier of the blueprint the aggregation property will be added to
	BlueprintIdentifier pulumi.StringInput
	// The aggregation property of the blueprint
	Properties AggregationPropertiesPropertiesMapInput
}

func (AggregationPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aggregationPropertiesArgs)(nil)).Elem()
}

type AggregationPropertiesInput interface {
	pulumi.Input

	ToAggregationPropertiesOutput() AggregationPropertiesOutput
	ToAggregationPropertiesOutputWithContext(ctx context.Context) AggregationPropertiesOutput
}

func (*AggregationProperties) ElementType() reflect.Type {
	return reflect.TypeOf((**AggregationProperties)(nil)).Elem()
}

func (i *AggregationProperties) ToAggregationPropertiesOutput() AggregationPropertiesOutput {
	return i.ToAggregationPropertiesOutputWithContext(context.Background())
}

func (i *AggregationProperties) ToAggregationPropertiesOutputWithContext(ctx context.Context) AggregationPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AggregationPropertiesOutput)
}

// AggregationPropertiesArrayInput is an input type that accepts AggregationPropertiesArray and AggregationPropertiesArrayOutput values.
// You can construct a concrete instance of `AggregationPropertiesArrayInput` via:
//
//	AggregationPropertiesArray{ AggregationPropertiesArgs{...} }
type AggregationPropertiesArrayInput interface {
	pulumi.Input

	ToAggregationPropertiesArrayOutput() AggregationPropertiesArrayOutput
	ToAggregationPropertiesArrayOutputWithContext(context.Context) AggregationPropertiesArrayOutput
}

type AggregationPropertiesArray []AggregationPropertiesInput

func (AggregationPropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AggregationProperties)(nil)).Elem()
}

func (i AggregationPropertiesArray) ToAggregationPropertiesArrayOutput() AggregationPropertiesArrayOutput {
	return i.ToAggregationPropertiesArrayOutputWithContext(context.Background())
}

func (i AggregationPropertiesArray) ToAggregationPropertiesArrayOutputWithContext(ctx context.Context) AggregationPropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AggregationPropertiesArrayOutput)
}

// AggregationPropertiesMapInput is an input type that accepts AggregationPropertiesMap and AggregationPropertiesMapOutput values.
// You can construct a concrete instance of `AggregationPropertiesMapInput` via:
//
//	AggregationPropertiesMap{ "key": AggregationPropertiesArgs{...} }
type AggregationPropertiesMapInput interface {
	pulumi.Input

	ToAggregationPropertiesMapOutput() AggregationPropertiesMapOutput
	ToAggregationPropertiesMapOutputWithContext(context.Context) AggregationPropertiesMapOutput
}

type AggregationPropertiesMap map[string]AggregationPropertiesInput

func (AggregationPropertiesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AggregationProperties)(nil)).Elem()
}

func (i AggregationPropertiesMap) ToAggregationPropertiesMapOutput() AggregationPropertiesMapOutput {
	return i.ToAggregationPropertiesMapOutputWithContext(context.Background())
}

func (i AggregationPropertiesMap) ToAggregationPropertiesMapOutputWithContext(ctx context.Context) AggregationPropertiesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AggregationPropertiesMapOutput)
}

type AggregationPropertiesOutput struct{ *pulumi.OutputState }

func (AggregationPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AggregationProperties)(nil)).Elem()
}

func (o AggregationPropertiesOutput) ToAggregationPropertiesOutput() AggregationPropertiesOutput {
	return o
}

func (o AggregationPropertiesOutput) ToAggregationPropertiesOutputWithContext(ctx context.Context) AggregationPropertiesOutput {
	return o
}

// The identifier of the blueprint the aggregation property will be added to
func (o AggregationPropertiesOutput) BlueprintIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *AggregationProperties) pulumi.StringOutput { return v.BlueprintIdentifier }).(pulumi.StringOutput)
}

// The aggregation property of the blueprint
func (o AggregationPropertiesOutput) Properties() AggregationPropertiesPropertiesMapOutput {
	return o.ApplyT(func(v *AggregationProperties) AggregationPropertiesPropertiesMapOutput { return v.Properties }).(AggregationPropertiesPropertiesMapOutput)
}

type AggregationPropertiesArrayOutput struct{ *pulumi.OutputState }

func (AggregationPropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AggregationProperties)(nil)).Elem()
}

func (o AggregationPropertiesArrayOutput) ToAggregationPropertiesArrayOutput() AggregationPropertiesArrayOutput {
	return o
}

func (o AggregationPropertiesArrayOutput) ToAggregationPropertiesArrayOutputWithContext(ctx context.Context) AggregationPropertiesArrayOutput {
	return o
}

func (o AggregationPropertiesArrayOutput) Index(i pulumi.IntInput) AggregationPropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AggregationProperties {
		return vs[0].([]*AggregationProperties)[vs[1].(int)]
	}).(AggregationPropertiesOutput)
}

type AggregationPropertiesMapOutput struct{ *pulumi.OutputState }

func (AggregationPropertiesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AggregationProperties)(nil)).Elem()
}

func (o AggregationPropertiesMapOutput) ToAggregationPropertiesMapOutput() AggregationPropertiesMapOutput {
	return o
}

func (o AggregationPropertiesMapOutput) ToAggregationPropertiesMapOutputWithContext(ctx context.Context) AggregationPropertiesMapOutput {
	return o
}

func (o AggregationPropertiesMapOutput) MapIndex(k pulumi.StringInput) AggregationPropertiesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AggregationProperties {
		return vs[0].(map[string]*AggregationProperties)[vs[1].(string)]
	}).(AggregationPropertiesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AggregationPropertiesInput)(nil)).Elem(), &AggregationProperties{})
	pulumi.RegisterInputType(reflect.TypeOf((*AggregationPropertiesArrayInput)(nil)).Elem(), AggregationPropertiesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AggregationPropertiesMapInput)(nil)).Elem(), AggregationPropertiesMap{})
	pulumi.RegisterOutputType(AggregationPropertiesOutput{})
	pulumi.RegisterOutputType(AggregationPropertiesArrayOutput{})
	pulumi.RegisterOutputType(AggregationPropertiesMapOutput{})
}
