// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package port

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Entity struct {
	pulumi.CustomResourceState

	// The blueprint identifier the entity relates to
	Blueprint pulumi.StringOutput `pulumi:"blueprint"`
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// The identifier of the entity
	Identifier pulumi.StringPtrOutput `pulumi:"identifier"`
	// The metadata of the entity
	Properties EntityPropertyArrayOutput `pulumi:"properties"`
	// The other entities that are connected
	Relations EntityRelationArrayOutput `pulumi:"relations"`
	// The runID of the action run that created the entity
	RunId pulumi.StringPtrOutput `pulumi:"runId"`
	// The team related to the entity
	Team pulumi.StringPtrOutput `pulumi:"team"`
	// The teams related to the entity
	Teams pulumi.StringArrayOutput `pulumi:"teams"`
	// The display name of the entity
	Title     pulumi.StringOutput `pulumi:"title"`
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	UpdatedBy pulumi.StringOutput `pulumi:"updatedBy"`
}

// NewEntity registers a new resource with the given unique name, arguments, and options.
func NewEntity(ctx *pulumi.Context,
	name string, args *EntityArgs, opts ...pulumi.ResourceOption) (*Entity, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Blueprint == nil {
		return nil, errors.New("invalid value for required argument 'Blueprint'")
	}
	if args.Properties == nil {
		return nil, errors.New("invalid value for required argument 'Properties'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Entity
	err := ctx.RegisterResource("port:index/entity:Entity", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEntity gets an existing Entity resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEntity(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EntityState, opts ...pulumi.ResourceOption) (*Entity, error) {
	var resource Entity
	err := ctx.ReadResource("port:index/entity:Entity", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Entity resources.
type entityState struct {
	// The blueprint identifier the entity relates to
	Blueprint *string `pulumi:"blueprint"`
	CreatedAt *string `pulumi:"createdAt"`
	CreatedBy *string `pulumi:"createdBy"`
	// The identifier of the entity
	Identifier *string `pulumi:"identifier"`
	// The metadata of the entity
	Properties []EntityProperty `pulumi:"properties"`
	// The other entities that are connected
	Relations []EntityRelation `pulumi:"relations"`
	// The runID of the action run that created the entity
	RunId *string `pulumi:"runId"`
	// The team related to the entity
	Team *string `pulumi:"team"`
	// The teams related to the entity
	Teams []string `pulumi:"teams"`
	// The display name of the entity
	Title     *string `pulumi:"title"`
	UpdatedAt *string `pulumi:"updatedAt"`
	UpdatedBy *string `pulumi:"updatedBy"`
}

type EntityState struct {
	// The blueprint identifier the entity relates to
	Blueprint pulumi.StringPtrInput
	CreatedAt pulumi.StringPtrInput
	CreatedBy pulumi.StringPtrInput
	// The identifier of the entity
	Identifier pulumi.StringPtrInput
	// The metadata of the entity
	Properties EntityPropertyArrayInput
	// The other entities that are connected
	Relations EntityRelationArrayInput
	// The runID of the action run that created the entity
	RunId pulumi.StringPtrInput
	// The team related to the entity
	Team pulumi.StringPtrInput
	// The teams related to the entity
	Teams pulumi.StringArrayInput
	// The display name of the entity
	Title     pulumi.StringPtrInput
	UpdatedAt pulumi.StringPtrInput
	UpdatedBy pulumi.StringPtrInput
}

func (EntityState) ElementType() reflect.Type {
	return reflect.TypeOf((*entityState)(nil)).Elem()
}

type entityArgs struct {
	// The blueprint identifier the entity relates to
	Blueprint string `pulumi:"blueprint"`
	// The identifier of the entity
	Identifier *string `pulumi:"identifier"`
	// The metadata of the entity
	Properties []EntityProperty `pulumi:"properties"`
	// The other entities that are connected
	Relations []EntityRelation `pulumi:"relations"`
	// The runID of the action run that created the entity
	RunId *string `pulumi:"runId"`
	// The team related to the entity
	Team *string `pulumi:"team"`
	// The teams related to the entity
	Teams []string `pulumi:"teams"`
	// The display name of the entity
	Title string `pulumi:"title"`
}

// The set of arguments for constructing a Entity resource.
type EntityArgs struct {
	// The blueprint identifier the entity relates to
	Blueprint pulumi.StringInput
	// The identifier of the entity
	Identifier pulumi.StringPtrInput
	// The metadata of the entity
	Properties EntityPropertyArrayInput
	// The other entities that are connected
	Relations EntityRelationArrayInput
	// The runID of the action run that created the entity
	RunId pulumi.StringPtrInput
	// The team related to the entity
	Team pulumi.StringPtrInput
	// The teams related to the entity
	Teams pulumi.StringArrayInput
	// The display name of the entity
	Title pulumi.StringInput
}

func (EntityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*entityArgs)(nil)).Elem()
}

type EntityInput interface {
	pulumi.Input

	ToEntityOutput() EntityOutput
	ToEntityOutputWithContext(ctx context.Context) EntityOutput
}

func (*Entity) ElementType() reflect.Type {
	return reflect.TypeOf((**Entity)(nil)).Elem()
}

func (i *Entity) ToEntityOutput() EntityOutput {
	return i.ToEntityOutputWithContext(context.Background())
}

func (i *Entity) ToEntityOutputWithContext(ctx context.Context) EntityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityOutput)
}

// EntityArrayInput is an input type that accepts EntityArray and EntityArrayOutput values.
// You can construct a concrete instance of `EntityArrayInput` via:
//
//	EntityArray{ EntityArgs{...} }
type EntityArrayInput interface {
	pulumi.Input

	ToEntityArrayOutput() EntityArrayOutput
	ToEntityArrayOutputWithContext(context.Context) EntityArrayOutput
}

type EntityArray []EntityInput

func (EntityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Entity)(nil)).Elem()
}

func (i EntityArray) ToEntityArrayOutput() EntityArrayOutput {
	return i.ToEntityArrayOutputWithContext(context.Background())
}

func (i EntityArray) ToEntityArrayOutputWithContext(ctx context.Context) EntityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityArrayOutput)
}

// EntityMapInput is an input type that accepts EntityMap and EntityMapOutput values.
// You can construct a concrete instance of `EntityMapInput` via:
//
//	EntityMap{ "key": EntityArgs{...} }
type EntityMapInput interface {
	pulumi.Input

	ToEntityMapOutput() EntityMapOutput
	ToEntityMapOutputWithContext(context.Context) EntityMapOutput
}

type EntityMap map[string]EntityInput

func (EntityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Entity)(nil)).Elem()
}

func (i EntityMap) ToEntityMapOutput() EntityMapOutput {
	return i.ToEntityMapOutputWithContext(context.Background())
}

func (i EntityMap) ToEntityMapOutputWithContext(ctx context.Context) EntityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityMapOutput)
}

type EntityOutput struct{ *pulumi.OutputState }

func (EntityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Entity)(nil)).Elem()
}

func (o EntityOutput) ToEntityOutput() EntityOutput {
	return o
}

func (o EntityOutput) ToEntityOutputWithContext(ctx context.Context) EntityOutput {
	return o
}

// The blueprint identifier the entity relates to
func (o EntityOutput) Blueprint() pulumi.StringOutput {
	return o.ApplyT(func(v *Entity) pulumi.StringOutput { return v.Blueprint }).(pulumi.StringOutput)
}

func (o EntityOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Entity) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o EntityOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *Entity) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// The identifier of the entity
func (o EntityOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Entity) pulumi.StringPtrOutput { return v.Identifier }).(pulumi.StringPtrOutput)
}

// The metadata of the entity
func (o EntityOutput) Properties() EntityPropertyArrayOutput {
	return o.ApplyT(func(v *Entity) EntityPropertyArrayOutput { return v.Properties }).(EntityPropertyArrayOutput)
}

// The other entities that are connected
func (o EntityOutput) Relations() EntityRelationArrayOutput {
	return o.ApplyT(func(v *Entity) EntityRelationArrayOutput { return v.Relations }).(EntityRelationArrayOutput)
}

// The runID of the action run that created the entity
func (o EntityOutput) RunId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Entity) pulumi.StringPtrOutput { return v.RunId }).(pulumi.StringPtrOutput)
}

// The team related to the entity
func (o EntityOutput) Team() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Entity) pulumi.StringPtrOutput { return v.Team }).(pulumi.StringPtrOutput)
}

// The teams related to the entity
func (o EntityOutput) Teams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Entity) pulumi.StringArrayOutput { return v.Teams }).(pulumi.StringArrayOutput)
}

// The display name of the entity
func (o EntityOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *Entity) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

func (o EntityOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Entity) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

func (o EntityOutput) UpdatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *Entity) pulumi.StringOutput { return v.UpdatedBy }).(pulumi.StringOutput)
}

type EntityArrayOutput struct{ *pulumi.OutputState }

func (EntityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Entity)(nil)).Elem()
}

func (o EntityArrayOutput) ToEntityArrayOutput() EntityArrayOutput {
	return o
}

func (o EntityArrayOutput) ToEntityArrayOutputWithContext(ctx context.Context) EntityArrayOutput {
	return o
}

func (o EntityArrayOutput) Index(i pulumi.IntInput) EntityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Entity {
		return vs[0].([]*Entity)[vs[1].(int)]
	}).(EntityOutput)
}

type EntityMapOutput struct{ *pulumi.OutputState }

func (EntityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Entity)(nil)).Elem()
}

func (o EntityMapOutput) ToEntityMapOutput() EntityMapOutput {
	return o
}

func (o EntityMapOutput) ToEntityMapOutputWithContext(ctx context.Context) EntityMapOutput {
	return o
}

func (o EntityMapOutput) MapIndex(k pulumi.StringInput) EntityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Entity {
		return vs[0].(map[string]*Entity)[vs[1].(string)]
	}).(EntityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EntityInput)(nil)).Elem(), &Entity{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityArrayInput)(nil)).Elem(), EntityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityMapInput)(nil)).Elem(), EntityMap{})
	pulumi.RegisterOutputType(EntityOutput{})
	pulumi.RegisterOutputType(EntityArrayOutput{})
	pulumi.RegisterOutputType(EntityMapOutput{})
}
