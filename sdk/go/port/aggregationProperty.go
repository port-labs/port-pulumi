// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package port

import (
	"context"
	"reflect"

	"errors"
	"github.com/port-labs/pulumi-port/sdk/go/port/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AggregationProperty struct {
	pulumi.CustomResourceState

	// The identifier of the aggregation property in the blueprint
	AggregationIdentifier pulumi.StringOutput `pulumi:"aggregationIdentifier"`
	// The identifier of the blueprint the aggregation property will be added to
	BlueprintIdentifier pulumi.StringOutput `pulumi:"blueprintIdentifier"`
	// The description of the aggregation property
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The icon of the aggregation property
	Icon pulumi.StringPtrOutput `pulumi:"icon"`
	// The aggregation method to perform on the target blueprint, one of count_entities, average_entities, average_by_property,
	// aggregate_by_property
	Method AggregationPropertyMethodOutput `pulumi:"method"`
	// Query to filter the target entities
	Query pulumi.StringPtrOutput `pulumi:"query"`
	// The identifier of the blueprint to perform the aggregation on
	TargetBlueprintIdentifier pulumi.StringOutput `pulumi:"targetBlueprintIdentifier"`
	// The title of the aggregation property
	Title pulumi.StringPtrOutput `pulumi:"title"`
}

// NewAggregationProperty registers a new resource with the given unique name, arguments, and options.
func NewAggregationProperty(ctx *pulumi.Context,
	name string, args *AggregationPropertyArgs, opts ...pulumi.ResourceOption) (*AggregationProperty, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AggregationIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'AggregationIdentifier'")
	}
	if args.BlueprintIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'BlueprintIdentifier'")
	}
	if args.Method == nil {
		return nil, errors.New("invalid value for required argument 'Method'")
	}
	if args.TargetBlueprintIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'TargetBlueprintIdentifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AggregationProperty
	err := ctx.RegisterResource("port:index/aggregationProperty:AggregationProperty", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAggregationProperty gets an existing AggregationProperty resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAggregationProperty(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AggregationPropertyState, opts ...pulumi.ResourceOption) (*AggregationProperty, error) {
	var resource AggregationProperty
	err := ctx.ReadResource("port:index/aggregationProperty:AggregationProperty", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AggregationProperty resources.
type aggregationPropertyState struct {
	// The identifier of the aggregation property in the blueprint
	AggregationIdentifier *string `pulumi:"aggregationIdentifier"`
	// The identifier of the blueprint the aggregation property will be added to
	BlueprintIdentifier *string `pulumi:"blueprintIdentifier"`
	// The description of the aggregation property
	Description *string `pulumi:"description"`
	// The icon of the aggregation property
	Icon *string `pulumi:"icon"`
	// The aggregation method to perform on the target blueprint, one of count_entities, average_entities, average_by_property,
	// aggregate_by_property
	Method *AggregationPropertyMethod `pulumi:"method"`
	// Query to filter the target entities
	Query *string `pulumi:"query"`
	// The identifier of the blueprint to perform the aggregation on
	TargetBlueprintIdentifier *string `pulumi:"targetBlueprintIdentifier"`
	// The title of the aggregation property
	Title *string `pulumi:"title"`
}

type AggregationPropertyState struct {
	// The identifier of the aggregation property in the blueprint
	AggregationIdentifier pulumi.StringPtrInput
	// The identifier of the blueprint the aggregation property will be added to
	BlueprintIdentifier pulumi.StringPtrInput
	// The description of the aggregation property
	Description pulumi.StringPtrInput
	// The icon of the aggregation property
	Icon pulumi.StringPtrInput
	// The aggregation method to perform on the target blueprint, one of count_entities, average_entities, average_by_property,
	// aggregate_by_property
	Method AggregationPropertyMethodPtrInput
	// Query to filter the target entities
	Query pulumi.StringPtrInput
	// The identifier of the blueprint to perform the aggregation on
	TargetBlueprintIdentifier pulumi.StringPtrInput
	// The title of the aggregation property
	Title pulumi.StringPtrInput
}

func (AggregationPropertyState) ElementType() reflect.Type {
	return reflect.TypeOf((*aggregationPropertyState)(nil)).Elem()
}

type aggregationPropertyArgs struct {
	// The identifier of the aggregation property in the blueprint
	AggregationIdentifier string `pulumi:"aggregationIdentifier"`
	// The identifier of the blueprint the aggregation property will be added to
	BlueprintIdentifier string `pulumi:"blueprintIdentifier"`
	// The description of the aggregation property
	Description *string `pulumi:"description"`
	// The icon of the aggregation property
	Icon *string `pulumi:"icon"`
	// The aggregation method to perform on the target blueprint, one of count_entities, average_entities, average_by_property,
	// aggregate_by_property
	Method AggregationPropertyMethod `pulumi:"method"`
	// Query to filter the target entities
	Query *string `pulumi:"query"`
	// The identifier of the blueprint to perform the aggregation on
	TargetBlueprintIdentifier string `pulumi:"targetBlueprintIdentifier"`
	// The title of the aggregation property
	Title *string `pulumi:"title"`
}

// The set of arguments for constructing a AggregationProperty resource.
type AggregationPropertyArgs struct {
	// The identifier of the aggregation property in the blueprint
	AggregationIdentifier pulumi.StringInput
	// The identifier of the blueprint the aggregation property will be added to
	BlueprintIdentifier pulumi.StringInput
	// The description of the aggregation property
	Description pulumi.StringPtrInput
	// The icon of the aggregation property
	Icon pulumi.StringPtrInput
	// The aggregation method to perform on the target blueprint, one of count_entities, average_entities, average_by_property,
	// aggregate_by_property
	Method AggregationPropertyMethodInput
	// Query to filter the target entities
	Query pulumi.StringPtrInput
	// The identifier of the blueprint to perform the aggregation on
	TargetBlueprintIdentifier pulumi.StringInput
	// The title of the aggregation property
	Title pulumi.StringPtrInput
}

func (AggregationPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aggregationPropertyArgs)(nil)).Elem()
}

type AggregationPropertyInput interface {
	pulumi.Input

	ToAggregationPropertyOutput() AggregationPropertyOutput
	ToAggregationPropertyOutputWithContext(ctx context.Context) AggregationPropertyOutput
}

func (*AggregationProperty) ElementType() reflect.Type {
	return reflect.TypeOf((**AggregationProperty)(nil)).Elem()
}

func (i *AggregationProperty) ToAggregationPropertyOutput() AggregationPropertyOutput {
	return i.ToAggregationPropertyOutputWithContext(context.Background())
}

func (i *AggregationProperty) ToAggregationPropertyOutputWithContext(ctx context.Context) AggregationPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AggregationPropertyOutput)
}

// AggregationPropertyArrayInput is an input type that accepts AggregationPropertyArray and AggregationPropertyArrayOutput values.
// You can construct a concrete instance of `AggregationPropertyArrayInput` via:
//
//	AggregationPropertyArray{ AggregationPropertyArgs{...} }
type AggregationPropertyArrayInput interface {
	pulumi.Input

	ToAggregationPropertyArrayOutput() AggregationPropertyArrayOutput
	ToAggregationPropertyArrayOutputWithContext(context.Context) AggregationPropertyArrayOutput
}

type AggregationPropertyArray []AggregationPropertyInput

func (AggregationPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AggregationProperty)(nil)).Elem()
}

func (i AggregationPropertyArray) ToAggregationPropertyArrayOutput() AggregationPropertyArrayOutput {
	return i.ToAggregationPropertyArrayOutputWithContext(context.Background())
}

func (i AggregationPropertyArray) ToAggregationPropertyArrayOutputWithContext(ctx context.Context) AggregationPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AggregationPropertyArrayOutput)
}

// AggregationPropertyMapInput is an input type that accepts AggregationPropertyMap and AggregationPropertyMapOutput values.
// You can construct a concrete instance of `AggregationPropertyMapInput` via:
//
//	AggregationPropertyMap{ "key": AggregationPropertyArgs{...} }
type AggregationPropertyMapInput interface {
	pulumi.Input

	ToAggregationPropertyMapOutput() AggregationPropertyMapOutput
	ToAggregationPropertyMapOutputWithContext(context.Context) AggregationPropertyMapOutput
}

type AggregationPropertyMap map[string]AggregationPropertyInput

func (AggregationPropertyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AggregationProperty)(nil)).Elem()
}

func (i AggregationPropertyMap) ToAggregationPropertyMapOutput() AggregationPropertyMapOutput {
	return i.ToAggregationPropertyMapOutputWithContext(context.Background())
}

func (i AggregationPropertyMap) ToAggregationPropertyMapOutputWithContext(ctx context.Context) AggregationPropertyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AggregationPropertyMapOutput)
}

type AggregationPropertyOutput struct{ *pulumi.OutputState }

func (AggregationPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AggregationProperty)(nil)).Elem()
}

func (o AggregationPropertyOutput) ToAggregationPropertyOutput() AggregationPropertyOutput {
	return o
}

func (o AggregationPropertyOutput) ToAggregationPropertyOutputWithContext(ctx context.Context) AggregationPropertyOutput {
	return o
}

// The identifier of the aggregation property in the blueprint
func (o AggregationPropertyOutput) AggregationIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *AggregationProperty) pulumi.StringOutput { return v.AggregationIdentifier }).(pulumi.StringOutput)
}

// The identifier of the blueprint the aggregation property will be added to
func (o AggregationPropertyOutput) BlueprintIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *AggregationProperty) pulumi.StringOutput { return v.BlueprintIdentifier }).(pulumi.StringOutput)
}

// The description of the aggregation property
func (o AggregationPropertyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AggregationProperty) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The icon of the aggregation property
func (o AggregationPropertyOutput) Icon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AggregationProperty) pulumi.StringPtrOutput { return v.Icon }).(pulumi.StringPtrOutput)
}

// The aggregation method to perform on the target blueprint, one of count_entities, average_entities, average_by_property,
// aggregate_by_property
func (o AggregationPropertyOutput) Method() AggregationPropertyMethodOutput {
	return o.ApplyT(func(v *AggregationProperty) AggregationPropertyMethodOutput { return v.Method }).(AggregationPropertyMethodOutput)
}

// Query to filter the target entities
func (o AggregationPropertyOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AggregationProperty) pulumi.StringPtrOutput { return v.Query }).(pulumi.StringPtrOutput)
}

// The identifier of the blueprint to perform the aggregation on
func (o AggregationPropertyOutput) TargetBlueprintIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *AggregationProperty) pulumi.StringOutput { return v.TargetBlueprintIdentifier }).(pulumi.StringOutput)
}

// The title of the aggregation property
func (o AggregationPropertyOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AggregationProperty) pulumi.StringPtrOutput { return v.Title }).(pulumi.StringPtrOutput)
}

type AggregationPropertyArrayOutput struct{ *pulumi.OutputState }

func (AggregationPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AggregationProperty)(nil)).Elem()
}

func (o AggregationPropertyArrayOutput) ToAggregationPropertyArrayOutput() AggregationPropertyArrayOutput {
	return o
}

func (o AggregationPropertyArrayOutput) ToAggregationPropertyArrayOutputWithContext(ctx context.Context) AggregationPropertyArrayOutput {
	return o
}

func (o AggregationPropertyArrayOutput) Index(i pulumi.IntInput) AggregationPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AggregationProperty {
		return vs[0].([]*AggregationProperty)[vs[1].(int)]
	}).(AggregationPropertyOutput)
}

type AggregationPropertyMapOutput struct{ *pulumi.OutputState }

func (AggregationPropertyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AggregationProperty)(nil)).Elem()
}

func (o AggregationPropertyMapOutput) ToAggregationPropertyMapOutput() AggregationPropertyMapOutput {
	return o
}

func (o AggregationPropertyMapOutput) ToAggregationPropertyMapOutputWithContext(ctx context.Context) AggregationPropertyMapOutput {
	return o
}

func (o AggregationPropertyMapOutput) MapIndex(k pulumi.StringInput) AggregationPropertyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AggregationProperty {
		return vs[0].(map[string]*AggregationProperty)[vs[1].(string)]
	}).(AggregationPropertyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AggregationPropertyInput)(nil)).Elem(), &AggregationProperty{})
	pulumi.RegisterInputType(reflect.TypeOf((*AggregationPropertyArrayInput)(nil)).Elem(), AggregationPropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AggregationPropertyMapInput)(nil)).Elem(), AggregationPropertyMap{})
	pulumi.RegisterOutputType(AggregationPropertyOutput{})
	pulumi.RegisterOutputType(AggregationPropertyArrayOutput{})
	pulumi.RegisterOutputType(AggregationPropertyMapOutput{})
}
