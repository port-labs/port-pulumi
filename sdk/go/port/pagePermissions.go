// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package port

import (
	"context"
	"reflect"

	"errors"
	"github.com/port-labs/pulumi-port/sdk/v2/go/port/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PagePermissions struct {
	pulumi.CustomResourceState

	PageIdentifier pulumi.StringOutput `pulumi:"pageIdentifier"`
	// The permission to read the page
	Read PagePermissionsReadOutput `pulumi:"read"`
}

// NewPagePermissions registers a new resource with the given unique name, arguments, and options.
func NewPagePermissions(ctx *pulumi.Context,
	name string, args *PagePermissionsArgs, opts ...pulumi.ResourceOption) (*PagePermissions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PageIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'PageIdentifier'")
	}
	if args.Read == nil {
		return nil, errors.New("invalid value for required argument 'Read'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PagePermissions
	err := ctx.RegisterResource("port:index/pagePermissions:PagePermissions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPagePermissions gets an existing PagePermissions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPagePermissions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PagePermissionsState, opts ...pulumi.ResourceOption) (*PagePermissions, error) {
	var resource PagePermissions
	err := ctx.ReadResource("port:index/pagePermissions:PagePermissions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PagePermissions resources.
type pagePermissionsState struct {
	PageIdentifier *string `pulumi:"pageIdentifier"`
	// The permission to read the page
	Read *PagePermissionsRead `pulumi:"read"`
}

type PagePermissionsState struct {
	PageIdentifier pulumi.StringPtrInput
	// The permission to read the page
	Read PagePermissionsReadPtrInput
}

func (PagePermissionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*pagePermissionsState)(nil)).Elem()
}

type pagePermissionsArgs struct {
	PageIdentifier string `pulumi:"pageIdentifier"`
	// The permission to read the page
	Read PagePermissionsRead `pulumi:"read"`
}

// The set of arguments for constructing a PagePermissions resource.
type PagePermissionsArgs struct {
	PageIdentifier pulumi.StringInput
	// The permission to read the page
	Read PagePermissionsReadInput
}

func (PagePermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pagePermissionsArgs)(nil)).Elem()
}

type PagePermissionsInput interface {
	pulumi.Input

	ToPagePermissionsOutput() PagePermissionsOutput
	ToPagePermissionsOutputWithContext(ctx context.Context) PagePermissionsOutput
}

func (*PagePermissions) ElementType() reflect.Type {
	return reflect.TypeOf((**PagePermissions)(nil)).Elem()
}

func (i *PagePermissions) ToPagePermissionsOutput() PagePermissionsOutput {
	return i.ToPagePermissionsOutputWithContext(context.Background())
}

func (i *PagePermissions) ToPagePermissionsOutputWithContext(ctx context.Context) PagePermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PagePermissionsOutput)
}

// PagePermissionsArrayInput is an input type that accepts PagePermissionsArray and PagePermissionsArrayOutput values.
// You can construct a concrete instance of `PagePermissionsArrayInput` via:
//
//	PagePermissionsArray{ PagePermissionsArgs{...} }
type PagePermissionsArrayInput interface {
	pulumi.Input

	ToPagePermissionsArrayOutput() PagePermissionsArrayOutput
	ToPagePermissionsArrayOutputWithContext(context.Context) PagePermissionsArrayOutput
}

type PagePermissionsArray []PagePermissionsInput

func (PagePermissionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PagePermissions)(nil)).Elem()
}

func (i PagePermissionsArray) ToPagePermissionsArrayOutput() PagePermissionsArrayOutput {
	return i.ToPagePermissionsArrayOutputWithContext(context.Background())
}

func (i PagePermissionsArray) ToPagePermissionsArrayOutputWithContext(ctx context.Context) PagePermissionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PagePermissionsArrayOutput)
}

// PagePermissionsMapInput is an input type that accepts PagePermissionsMap and PagePermissionsMapOutput values.
// You can construct a concrete instance of `PagePermissionsMapInput` via:
//
//	PagePermissionsMap{ "key": PagePermissionsArgs{...} }
type PagePermissionsMapInput interface {
	pulumi.Input

	ToPagePermissionsMapOutput() PagePermissionsMapOutput
	ToPagePermissionsMapOutputWithContext(context.Context) PagePermissionsMapOutput
}

type PagePermissionsMap map[string]PagePermissionsInput

func (PagePermissionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PagePermissions)(nil)).Elem()
}

func (i PagePermissionsMap) ToPagePermissionsMapOutput() PagePermissionsMapOutput {
	return i.ToPagePermissionsMapOutputWithContext(context.Background())
}

func (i PagePermissionsMap) ToPagePermissionsMapOutputWithContext(ctx context.Context) PagePermissionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PagePermissionsMapOutput)
}

type PagePermissionsOutput struct{ *pulumi.OutputState }

func (PagePermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PagePermissions)(nil)).Elem()
}

func (o PagePermissionsOutput) ToPagePermissionsOutput() PagePermissionsOutput {
	return o
}

func (o PagePermissionsOutput) ToPagePermissionsOutputWithContext(ctx context.Context) PagePermissionsOutput {
	return o
}

func (o PagePermissionsOutput) PageIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *PagePermissions) pulumi.StringOutput { return v.PageIdentifier }).(pulumi.StringOutput)
}

// The permission to read the page
func (o PagePermissionsOutput) Read() PagePermissionsReadOutput {
	return o.ApplyT(func(v *PagePermissions) PagePermissionsReadOutput { return v.Read }).(PagePermissionsReadOutput)
}

type PagePermissionsArrayOutput struct{ *pulumi.OutputState }

func (PagePermissionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PagePermissions)(nil)).Elem()
}

func (o PagePermissionsArrayOutput) ToPagePermissionsArrayOutput() PagePermissionsArrayOutput {
	return o
}

func (o PagePermissionsArrayOutput) ToPagePermissionsArrayOutputWithContext(ctx context.Context) PagePermissionsArrayOutput {
	return o
}

func (o PagePermissionsArrayOutput) Index(i pulumi.IntInput) PagePermissionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PagePermissions {
		return vs[0].([]*PagePermissions)[vs[1].(int)]
	}).(PagePermissionsOutput)
}

type PagePermissionsMapOutput struct{ *pulumi.OutputState }

func (PagePermissionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PagePermissions)(nil)).Elem()
}

func (o PagePermissionsMapOutput) ToPagePermissionsMapOutput() PagePermissionsMapOutput {
	return o
}

func (o PagePermissionsMapOutput) ToPagePermissionsMapOutputWithContext(ctx context.Context) PagePermissionsMapOutput {
	return o
}

func (o PagePermissionsMapOutput) MapIndex(k pulumi.StringInput) PagePermissionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PagePermissions {
		return vs[0].(map[string]*PagePermissions)[vs[1].(string)]
	}).(PagePermissionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PagePermissionsInput)(nil)).Elem(), &PagePermissions{})
	pulumi.RegisterInputType(reflect.TypeOf((*PagePermissionsArrayInput)(nil)).Elem(), PagePermissionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PagePermissionsMapInput)(nil)).Elem(), PagePermissionsMap{})
	pulumi.RegisterOutputType(PagePermissionsOutput{})
	pulumi.RegisterOutputType(PagePermissionsArrayOutput{})
	pulumi.RegisterOutputType(PagePermissionsMapOutput{})
}
