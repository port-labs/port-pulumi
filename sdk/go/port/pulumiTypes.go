// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package port

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ActionInvocationMethod struct {
	Agent                *bool   `pulumi:"agent"`
	AzureOrg             *string `pulumi:"azureOrg"`
	OmitPayload          *bool   `pulumi:"omitPayload"`
	OmitUserInputs       *bool   `pulumi:"omitUserInputs"`
	Org                  *string `pulumi:"org"`
	Repo                 *string `pulumi:"repo"`
	ReportWorkflowStatus *bool   `pulumi:"reportWorkflowStatus"`
	Type                 string  `pulumi:"type"`
	Url                  *string `pulumi:"url"`
	Webhook              *string `pulumi:"webhook"`
	Workflow             *string `pulumi:"workflow"`
}

// ActionInvocationMethodInput is an input type that accepts ActionInvocationMethodArgs and ActionInvocationMethodOutput values.
// You can construct a concrete instance of `ActionInvocationMethodInput` via:
//
//	ActionInvocationMethodArgs{...}
type ActionInvocationMethodInput interface {
	pulumi.Input

	ToActionInvocationMethodOutput() ActionInvocationMethodOutput
	ToActionInvocationMethodOutputWithContext(context.Context) ActionInvocationMethodOutput
}

type ActionInvocationMethodArgs struct {
	Agent                pulumi.BoolPtrInput   `pulumi:"agent"`
	AzureOrg             pulumi.StringPtrInput `pulumi:"azureOrg"`
	OmitPayload          pulumi.BoolPtrInput   `pulumi:"omitPayload"`
	OmitUserInputs       pulumi.BoolPtrInput   `pulumi:"omitUserInputs"`
	Org                  pulumi.StringPtrInput `pulumi:"org"`
	Repo                 pulumi.StringPtrInput `pulumi:"repo"`
	ReportWorkflowStatus pulumi.BoolPtrInput   `pulumi:"reportWorkflowStatus"`
	Type                 pulumi.StringInput    `pulumi:"type"`
	Url                  pulumi.StringPtrInput `pulumi:"url"`
	Webhook              pulumi.StringPtrInput `pulumi:"webhook"`
	Workflow             pulumi.StringPtrInput `pulumi:"workflow"`
}

func (ActionInvocationMethodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionInvocationMethod)(nil)).Elem()
}

func (i ActionInvocationMethodArgs) ToActionInvocationMethodOutput() ActionInvocationMethodOutput {
	return i.ToActionInvocationMethodOutputWithContext(context.Background())
}

func (i ActionInvocationMethodArgs) ToActionInvocationMethodOutputWithContext(ctx context.Context) ActionInvocationMethodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionInvocationMethodOutput)
}

func (i ActionInvocationMethodArgs) ToActionInvocationMethodPtrOutput() ActionInvocationMethodPtrOutput {
	return i.ToActionInvocationMethodPtrOutputWithContext(context.Background())
}

func (i ActionInvocationMethodArgs) ToActionInvocationMethodPtrOutputWithContext(ctx context.Context) ActionInvocationMethodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionInvocationMethodOutput).ToActionInvocationMethodPtrOutputWithContext(ctx)
}

// ActionInvocationMethodPtrInput is an input type that accepts ActionInvocationMethodArgs, ActionInvocationMethodPtr and ActionInvocationMethodPtrOutput values.
// You can construct a concrete instance of `ActionInvocationMethodPtrInput` via:
//
//	        ActionInvocationMethodArgs{...}
//
//	or:
//
//	        nil
type ActionInvocationMethodPtrInput interface {
	pulumi.Input

	ToActionInvocationMethodPtrOutput() ActionInvocationMethodPtrOutput
	ToActionInvocationMethodPtrOutputWithContext(context.Context) ActionInvocationMethodPtrOutput
}

type actionInvocationMethodPtrType ActionInvocationMethodArgs

func ActionInvocationMethodPtr(v *ActionInvocationMethodArgs) ActionInvocationMethodPtrInput {
	return (*actionInvocationMethodPtrType)(v)
}

func (*actionInvocationMethodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionInvocationMethod)(nil)).Elem()
}

func (i *actionInvocationMethodPtrType) ToActionInvocationMethodPtrOutput() ActionInvocationMethodPtrOutput {
	return i.ToActionInvocationMethodPtrOutputWithContext(context.Background())
}

func (i *actionInvocationMethodPtrType) ToActionInvocationMethodPtrOutputWithContext(ctx context.Context) ActionInvocationMethodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionInvocationMethodPtrOutput)
}

type ActionInvocationMethodOutput struct{ *pulumi.OutputState }

func (ActionInvocationMethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionInvocationMethod)(nil)).Elem()
}

func (o ActionInvocationMethodOutput) ToActionInvocationMethodOutput() ActionInvocationMethodOutput {
	return o
}

func (o ActionInvocationMethodOutput) ToActionInvocationMethodOutputWithContext(ctx context.Context) ActionInvocationMethodOutput {
	return o
}

func (o ActionInvocationMethodOutput) ToActionInvocationMethodPtrOutput() ActionInvocationMethodPtrOutput {
	return o.ToActionInvocationMethodPtrOutputWithContext(context.Background())
}

func (o ActionInvocationMethodOutput) ToActionInvocationMethodPtrOutputWithContext(ctx context.Context) ActionInvocationMethodPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActionInvocationMethod) *ActionInvocationMethod {
		return &v
	}).(ActionInvocationMethodPtrOutput)
}

func (o ActionInvocationMethodOutput) Agent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActionInvocationMethod) *bool { return v.Agent }).(pulumi.BoolPtrOutput)
}

func (o ActionInvocationMethodOutput) AzureOrg() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionInvocationMethod) *string { return v.AzureOrg }).(pulumi.StringPtrOutput)
}

func (o ActionInvocationMethodOutput) OmitPayload() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActionInvocationMethod) *bool { return v.OmitPayload }).(pulumi.BoolPtrOutput)
}

func (o ActionInvocationMethodOutput) OmitUserInputs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActionInvocationMethod) *bool { return v.OmitUserInputs }).(pulumi.BoolPtrOutput)
}

func (o ActionInvocationMethodOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionInvocationMethod) *string { return v.Org }).(pulumi.StringPtrOutput)
}

func (o ActionInvocationMethodOutput) Repo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionInvocationMethod) *string { return v.Repo }).(pulumi.StringPtrOutput)
}

func (o ActionInvocationMethodOutput) ReportWorkflowStatus() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActionInvocationMethod) *bool { return v.ReportWorkflowStatus }).(pulumi.BoolPtrOutput)
}

func (o ActionInvocationMethodOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ActionInvocationMethod) string { return v.Type }).(pulumi.StringOutput)
}

func (o ActionInvocationMethodOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionInvocationMethod) *string { return v.Url }).(pulumi.StringPtrOutput)
}

func (o ActionInvocationMethodOutput) Webhook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionInvocationMethod) *string { return v.Webhook }).(pulumi.StringPtrOutput)
}

func (o ActionInvocationMethodOutput) Workflow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionInvocationMethod) *string { return v.Workflow }).(pulumi.StringPtrOutput)
}

type ActionInvocationMethodPtrOutput struct{ *pulumi.OutputState }

func (ActionInvocationMethodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionInvocationMethod)(nil)).Elem()
}

func (o ActionInvocationMethodPtrOutput) ToActionInvocationMethodPtrOutput() ActionInvocationMethodPtrOutput {
	return o
}

func (o ActionInvocationMethodPtrOutput) ToActionInvocationMethodPtrOutputWithContext(ctx context.Context) ActionInvocationMethodPtrOutput {
	return o
}

func (o ActionInvocationMethodPtrOutput) Elem() ActionInvocationMethodOutput {
	return o.ApplyT(func(v *ActionInvocationMethod) ActionInvocationMethod {
		if v != nil {
			return *v
		}
		var ret ActionInvocationMethod
		return ret
	}).(ActionInvocationMethodOutput)
}

func (o ActionInvocationMethodPtrOutput) Agent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ActionInvocationMethod) *bool {
		if v == nil {
			return nil
		}
		return v.Agent
	}).(pulumi.BoolPtrOutput)
}

func (o ActionInvocationMethodPtrOutput) AzureOrg() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionInvocationMethod) *string {
		if v == nil {
			return nil
		}
		return v.AzureOrg
	}).(pulumi.StringPtrOutput)
}

func (o ActionInvocationMethodPtrOutput) OmitPayload() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ActionInvocationMethod) *bool {
		if v == nil {
			return nil
		}
		return v.OmitPayload
	}).(pulumi.BoolPtrOutput)
}

func (o ActionInvocationMethodPtrOutput) OmitUserInputs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ActionInvocationMethod) *bool {
		if v == nil {
			return nil
		}
		return v.OmitUserInputs
	}).(pulumi.BoolPtrOutput)
}

func (o ActionInvocationMethodPtrOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionInvocationMethod) *string {
		if v == nil {
			return nil
		}
		return v.Org
	}).(pulumi.StringPtrOutput)
}

func (o ActionInvocationMethodPtrOutput) Repo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionInvocationMethod) *string {
		if v == nil {
			return nil
		}
		return v.Repo
	}).(pulumi.StringPtrOutput)
}

func (o ActionInvocationMethodPtrOutput) ReportWorkflowStatus() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ActionInvocationMethod) *bool {
		if v == nil {
			return nil
		}
		return v.ReportWorkflowStatus
	}).(pulumi.BoolPtrOutput)
}

func (o ActionInvocationMethodPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionInvocationMethod) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

func (o ActionInvocationMethodPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionInvocationMethod) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

func (o ActionInvocationMethodPtrOutput) Webhook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionInvocationMethod) *string {
		if v == nil {
			return nil
		}
		return v.Webhook
	}).(pulumi.StringPtrOutput)
}

func (o ActionInvocationMethodPtrOutput) Workflow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionInvocationMethod) *string {
		if v == nil {
			return nil
		}
		return v.Workflow
	}).(pulumi.StringPtrOutput)
}

type ActionUserProperty struct {
	Blueprint    *string  `pulumi:"blueprint"`
	Default      *string  `pulumi:"default"`
	DefaultItems []string `pulumi:"defaultItems"`
	Description  *string  `pulumi:"description"`
	Enums        []string `pulumi:"enums"`
	Format       *string  `pulumi:"format"`
	Identifier   string   `pulumi:"identifier"`
	Pattern      *string  `pulumi:"pattern"`
	Required     *bool    `pulumi:"required"`
	Title        string   `pulumi:"title"`
	Type         string   `pulumi:"type"`
}

// ActionUserPropertyInput is an input type that accepts ActionUserPropertyArgs and ActionUserPropertyOutput values.
// You can construct a concrete instance of `ActionUserPropertyInput` via:
//
//	ActionUserPropertyArgs{...}
type ActionUserPropertyInput interface {
	pulumi.Input

	ToActionUserPropertyOutput() ActionUserPropertyOutput
	ToActionUserPropertyOutputWithContext(context.Context) ActionUserPropertyOutput
}

type ActionUserPropertyArgs struct {
	Blueprint    pulumi.StringPtrInput   `pulumi:"blueprint"`
	Default      pulumi.StringPtrInput   `pulumi:"default"`
	DefaultItems pulumi.StringArrayInput `pulumi:"defaultItems"`
	Description  pulumi.StringPtrInput   `pulumi:"description"`
	Enums        pulumi.StringArrayInput `pulumi:"enums"`
	Format       pulumi.StringPtrInput   `pulumi:"format"`
	Identifier   pulumi.StringInput      `pulumi:"identifier"`
	Pattern      pulumi.StringPtrInput   `pulumi:"pattern"`
	Required     pulumi.BoolPtrInput     `pulumi:"required"`
	Title        pulumi.StringInput      `pulumi:"title"`
	Type         pulumi.StringInput      `pulumi:"type"`
}

func (ActionUserPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionUserProperty)(nil)).Elem()
}

func (i ActionUserPropertyArgs) ToActionUserPropertyOutput() ActionUserPropertyOutput {
	return i.ToActionUserPropertyOutputWithContext(context.Background())
}

func (i ActionUserPropertyArgs) ToActionUserPropertyOutputWithContext(ctx context.Context) ActionUserPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionUserPropertyOutput)
}

// ActionUserPropertyArrayInput is an input type that accepts ActionUserPropertyArray and ActionUserPropertyArrayOutput values.
// You can construct a concrete instance of `ActionUserPropertyArrayInput` via:
//
//	ActionUserPropertyArray{ ActionUserPropertyArgs{...} }
type ActionUserPropertyArrayInput interface {
	pulumi.Input

	ToActionUserPropertyArrayOutput() ActionUserPropertyArrayOutput
	ToActionUserPropertyArrayOutputWithContext(context.Context) ActionUserPropertyArrayOutput
}

type ActionUserPropertyArray []ActionUserPropertyInput

func (ActionUserPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActionUserProperty)(nil)).Elem()
}

func (i ActionUserPropertyArray) ToActionUserPropertyArrayOutput() ActionUserPropertyArrayOutput {
	return i.ToActionUserPropertyArrayOutputWithContext(context.Background())
}

func (i ActionUserPropertyArray) ToActionUserPropertyArrayOutputWithContext(ctx context.Context) ActionUserPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionUserPropertyArrayOutput)
}

type ActionUserPropertyOutput struct{ *pulumi.OutputState }

func (ActionUserPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionUserProperty)(nil)).Elem()
}

func (o ActionUserPropertyOutput) ToActionUserPropertyOutput() ActionUserPropertyOutput {
	return o
}

func (o ActionUserPropertyOutput) ToActionUserPropertyOutputWithContext(ctx context.Context) ActionUserPropertyOutput {
	return o
}

func (o ActionUserPropertyOutput) Blueprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionUserProperty) *string { return v.Blueprint }).(pulumi.StringPtrOutput)
}

func (o ActionUserPropertyOutput) Default() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionUserProperty) *string { return v.Default }).(pulumi.StringPtrOutput)
}

func (o ActionUserPropertyOutput) DefaultItems() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActionUserProperty) []string { return v.DefaultItems }).(pulumi.StringArrayOutput)
}

func (o ActionUserPropertyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionUserProperty) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ActionUserPropertyOutput) Enums() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActionUserProperty) []string { return v.Enums }).(pulumi.StringArrayOutput)
}

func (o ActionUserPropertyOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionUserProperty) *string { return v.Format }).(pulumi.StringPtrOutput)
}

func (o ActionUserPropertyOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v ActionUserProperty) string { return v.Identifier }).(pulumi.StringOutput)
}

func (o ActionUserPropertyOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionUserProperty) *string { return v.Pattern }).(pulumi.StringPtrOutput)
}

func (o ActionUserPropertyOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActionUserProperty) *bool { return v.Required }).(pulumi.BoolPtrOutput)
}

func (o ActionUserPropertyOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ActionUserProperty) string { return v.Title }).(pulumi.StringOutput)
}

func (o ActionUserPropertyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ActionUserProperty) string { return v.Type }).(pulumi.StringOutput)
}

type ActionUserPropertyArrayOutput struct{ *pulumi.OutputState }

func (ActionUserPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActionUserProperty)(nil)).Elem()
}

func (o ActionUserPropertyArrayOutput) ToActionUserPropertyArrayOutput() ActionUserPropertyArrayOutput {
	return o
}

func (o ActionUserPropertyArrayOutput) ToActionUserPropertyArrayOutputWithContext(ctx context.Context) ActionUserPropertyArrayOutput {
	return o
}

func (o ActionUserPropertyArrayOutput) Index(i pulumi.IntInput) ActionUserPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActionUserProperty {
		return vs[0].([]ActionUserProperty)[vs[1].(int)]
	}).(ActionUserPropertyOutput)
}

type BlueprintCalculationProperty struct {
	Calculation string            `pulumi:"calculation"`
	Colorized   *bool             `pulumi:"colorized"`
	Colors      map[string]string `pulumi:"colors"`
	Description *string           `pulumi:"description"`
	Format      *string           `pulumi:"format"`
	Icon        *string           `pulumi:"icon"`
	Identifier  string            `pulumi:"identifier"`
	Title       *string           `pulumi:"title"`
	Type        string            `pulumi:"type"`
}

// BlueprintCalculationPropertyInput is an input type that accepts BlueprintCalculationPropertyArgs and BlueprintCalculationPropertyOutput values.
// You can construct a concrete instance of `BlueprintCalculationPropertyInput` via:
//
//	BlueprintCalculationPropertyArgs{...}
type BlueprintCalculationPropertyInput interface {
	pulumi.Input

	ToBlueprintCalculationPropertyOutput() BlueprintCalculationPropertyOutput
	ToBlueprintCalculationPropertyOutputWithContext(context.Context) BlueprintCalculationPropertyOutput
}

type BlueprintCalculationPropertyArgs struct {
	Calculation pulumi.StringInput    `pulumi:"calculation"`
	Colorized   pulumi.BoolPtrInput   `pulumi:"colorized"`
	Colors      pulumi.StringMapInput `pulumi:"colors"`
	Description pulumi.StringPtrInput `pulumi:"description"`
	Format      pulumi.StringPtrInput `pulumi:"format"`
	Icon        pulumi.StringPtrInput `pulumi:"icon"`
	Identifier  pulumi.StringInput    `pulumi:"identifier"`
	Title       pulumi.StringPtrInput `pulumi:"title"`
	Type        pulumi.StringInput    `pulumi:"type"`
}

func (BlueprintCalculationPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BlueprintCalculationProperty)(nil)).Elem()
}

func (i BlueprintCalculationPropertyArgs) ToBlueprintCalculationPropertyOutput() BlueprintCalculationPropertyOutput {
	return i.ToBlueprintCalculationPropertyOutputWithContext(context.Background())
}

func (i BlueprintCalculationPropertyArgs) ToBlueprintCalculationPropertyOutputWithContext(ctx context.Context) BlueprintCalculationPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlueprintCalculationPropertyOutput)
}

// BlueprintCalculationPropertyArrayInput is an input type that accepts BlueprintCalculationPropertyArray and BlueprintCalculationPropertyArrayOutput values.
// You can construct a concrete instance of `BlueprintCalculationPropertyArrayInput` via:
//
//	BlueprintCalculationPropertyArray{ BlueprintCalculationPropertyArgs{...} }
type BlueprintCalculationPropertyArrayInput interface {
	pulumi.Input

	ToBlueprintCalculationPropertyArrayOutput() BlueprintCalculationPropertyArrayOutput
	ToBlueprintCalculationPropertyArrayOutputWithContext(context.Context) BlueprintCalculationPropertyArrayOutput
}

type BlueprintCalculationPropertyArray []BlueprintCalculationPropertyInput

func (BlueprintCalculationPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BlueprintCalculationProperty)(nil)).Elem()
}

func (i BlueprintCalculationPropertyArray) ToBlueprintCalculationPropertyArrayOutput() BlueprintCalculationPropertyArrayOutput {
	return i.ToBlueprintCalculationPropertyArrayOutputWithContext(context.Background())
}

func (i BlueprintCalculationPropertyArray) ToBlueprintCalculationPropertyArrayOutputWithContext(ctx context.Context) BlueprintCalculationPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlueprintCalculationPropertyArrayOutput)
}

type BlueprintCalculationPropertyOutput struct{ *pulumi.OutputState }

func (BlueprintCalculationPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlueprintCalculationProperty)(nil)).Elem()
}

func (o BlueprintCalculationPropertyOutput) ToBlueprintCalculationPropertyOutput() BlueprintCalculationPropertyOutput {
	return o
}

func (o BlueprintCalculationPropertyOutput) ToBlueprintCalculationPropertyOutputWithContext(ctx context.Context) BlueprintCalculationPropertyOutput {
	return o
}

func (o BlueprintCalculationPropertyOutput) Calculation() pulumi.StringOutput {
	return o.ApplyT(func(v BlueprintCalculationProperty) string { return v.Calculation }).(pulumi.StringOutput)
}

func (o BlueprintCalculationPropertyOutput) Colorized() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BlueprintCalculationProperty) *bool { return v.Colorized }).(pulumi.BoolPtrOutput)
}

func (o BlueprintCalculationPropertyOutput) Colors() pulumi.StringMapOutput {
	return o.ApplyT(func(v BlueprintCalculationProperty) map[string]string { return v.Colors }).(pulumi.StringMapOutput)
}

func (o BlueprintCalculationPropertyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlueprintCalculationProperty) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o BlueprintCalculationPropertyOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlueprintCalculationProperty) *string { return v.Format }).(pulumi.StringPtrOutput)
}

func (o BlueprintCalculationPropertyOutput) Icon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlueprintCalculationProperty) *string { return v.Icon }).(pulumi.StringPtrOutput)
}

func (o BlueprintCalculationPropertyOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v BlueprintCalculationProperty) string { return v.Identifier }).(pulumi.StringOutput)
}

func (o BlueprintCalculationPropertyOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlueprintCalculationProperty) *string { return v.Title }).(pulumi.StringPtrOutput)
}

func (o BlueprintCalculationPropertyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BlueprintCalculationProperty) string { return v.Type }).(pulumi.StringOutput)
}

type BlueprintCalculationPropertyArrayOutput struct{ *pulumi.OutputState }

func (BlueprintCalculationPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BlueprintCalculationProperty)(nil)).Elem()
}

func (o BlueprintCalculationPropertyArrayOutput) ToBlueprintCalculationPropertyArrayOutput() BlueprintCalculationPropertyArrayOutput {
	return o
}

func (o BlueprintCalculationPropertyArrayOutput) ToBlueprintCalculationPropertyArrayOutputWithContext(ctx context.Context) BlueprintCalculationPropertyArrayOutput {
	return o
}

func (o BlueprintCalculationPropertyArrayOutput) Index(i pulumi.IntInput) BlueprintCalculationPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BlueprintCalculationProperty {
		return vs[0].([]BlueprintCalculationProperty)[vs[1].(int)]
	}).(BlueprintCalculationPropertyOutput)
}

type BlueprintChangelogDestination struct {
	Type string  `pulumi:"type"`
	Url  *string `pulumi:"url"`
}

// BlueprintChangelogDestinationInput is an input type that accepts BlueprintChangelogDestinationArgs and BlueprintChangelogDestinationOutput values.
// You can construct a concrete instance of `BlueprintChangelogDestinationInput` via:
//
//	BlueprintChangelogDestinationArgs{...}
type BlueprintChangelogDestinationInput interface {
	pulumi.Input

	ToBlueprintChangelogDestinationOutput() BlueprintChangelogDestinationOutput
	ToBlueprintChangelogDestinationOutputWithContext(context.Context) BlueprintChangelogDestinationOutput
}

type BlueprintChangelogDestinationArgs struct {
	Type pulumi.StringInput    `pulumi:"type"`
	Url  pulumi.StringPtrInput `pulumi:"url"`
}

func (BlueprintChangelogDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BlueprintChangelogDestination)(nil)).Elem()
}

func (i BlueprintChangelogDestinationArgs) ToBlueprintChangelogDestinationOutput() BlueprintChangelogDestinationOutput {
	return i.ToBlueprintChangelogDestinationOutputWithContext(context.Background())
}

func (i BlueprintChangelogDestinationArgs) ToBlueprintChangelogDestinationOutputWithContext(ctx context.Context) BlueprintChangelogDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlueprintChangelogDestinationOutput)
}

func (i BlueprintChangelogDestinationArgs) ToBlueprintChangelogDestinationPtrOutput() BlueprintChangelogDestinationPtrOutput {
	return i.ToBlueprintChangelogDestinationPtrOutputWithContext(context.Background())
}

func (i BlueprintChangelogDestinationArgs) ToBlueprintChangelogDestinationPtrOutputWithContext(ctx context.Context) BlueprintChangelogDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlueprintChangelogDestinationOutput).ToBlueprintChangelogDestinationPtrOutputWithContext(ctx)
}

// BlueprintChangelogDestinationPtrInput is an input type that accepts BlueprintChangelogDestinationArgs, BlueprintChangelogDestinationPtr and BlueprintChangelogDestinationPtrOutput values.
// You can construct a concrete instance of `BlueprintChangelogDestinationPtrInput` via:
//
//	        BlueprintChangelogDestinationArgs{...}
//
//	or:
//
//	        nil
type BlueprintChangelogDestinationPtrInput interface {
	pulumi.Input

	ToBlueprintChangelogDestinationPtrOutput() BlueprintChangelogDestinationPtrOutput
	ToBlueprintChangelogDestinationPtrOutputWithContext(context.Context) BlueprintChangelogDestinationPtrOutput
}

type blueprintChangelogDestinationPtrType BlueprintChangelogDestinationArgs

func BlueprintChangelogDestinationPtr(v *BlueprintChangelogDestinationArgs) BlueprintChangelogDestinationPtrInput {
	return (*blueprintChangelogDestinationPtrType)(v)
}

func (*blueprintChangelogDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BlueprintChangelogDestination)(nil)).Elem()
}

func (i *blueprintChangelogDestinationPtrType) ToBlueprintChangelogDestinationPtrOutput() BlueprintChangelogDestinationPtrOutput {
	return i.ToBlueprintChangelogDestinationPtrOutputWithContext(context.Background())
}

func (i *blueprintChangelogDestinationPtrType) ToBlueprintChangelogDestinationPtrOutputWithContext(ctx context.Context) BlueprintChangelogDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlueprintChangelogDestinationPtrOutput)
}

type BlueprintChangelogDestinationOutput struct{ *pulumi.OutputState }

func (BlueprintChangelogDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlueprintChangelogDestination)(nil)).Elem()
}

func (o BlueprintChangelogDestinationOutput) ToBlueprintChangelogDestinationOutput() BlueprintChangelogDestinationOutput {
	return o
}

func (o BlueprintChangelogDestinationOutput) ToBlueprintChangelogDestinationOutputWithContext(ctx context.Context) BlueprintChangelogDestinationOutput {
	return o
}

func (o BlueprintChangelogDestinationOutput) ToBlueprintChangelogDestinationPtrOutput() BlueprintChangelogDestinationPtrOutput {
	return o.ToBlueprintChangelogDestinationPtrOutputWithContext(context.Background())
}

func (o BlueprintChangelogDestinationOutput) ToBlueprintChangelogDestinationPtrOutputWithContext(ctx context.Context) BlueprintChangelogDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BlueprintChangelogDestination) *BlueprintChangelogDestination {
		return &v
	}).(BlueprintChangelogDestinationPtrOutput)
}

func (o BlueprintChangelogDestinationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BlueprintChangelogDestination) string { return v.Type }).(pulumi.StringOutput)
}

func (o BlueprintChangelogDestinationOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlueprintChangelogDestination) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type BlueprintChangelogDestinationPtrOutput struct{ *pulumi.OutputState }

func (BlueprintChangelogDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlueprintChangelogDestination)(nil)).Elem()
}

func (o BlueprintChangelogDestinationPtrOutput) ToBlueprintChangelogDestinationPtrOutput() BlueprintChangelogDestinationPtrOutput {
	return o
}

func (o BlueprintChangelogDestinationPtrOutput) ToBlueprintChangelogDestinationPtrOutputWithContext(ctx context.Context) BlueprintChangelogDestinationPtrOutput {
	return o
}

func (o BlueprintChangelogDestinationPtrOutput) Elem() BlueprintChangelogDestinationOutput {
	return o.ApplyT(func(v *BlueprintChangelogDestination) BlueprintChangelogDestination {
		if v != nil {
			return *v
		}
		var ret BlueprintChangelogDestination
		return ret
	}).(BlueprintChangelogDestinationOutput)
}

func (o BlueprintChangelogDestinationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlueprintChangelogDestination) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

func (o BlueprintChangelogDestinationPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlueprintChangelogDestination) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

type BlueprintMirrorProperty struct {
	Identifier string  `pulumi:"identifier"`
	Path       string  `pulumi:"path"`
	Title      *string `pulumi:"title"`
}

// BlueprintMirrorPropertyInput is an input type that accepts BlueprintMirrorPropertyArgs and BlueprintMirrorPropertyOutput values.
// You can construct a concrete instance of `BlueprintMirrorPropertyInput` via:
//
//	BlueprintMirrorPropertyArgs{...}
type BlueprintMirrorPropertyInput interface {
	pulumi.Input

	ToBlueprintMirrorPropertyOutput() BlueprintMirrorPropertyOutput
	ToBlueprintMirrorPropertyOutputWithContext(context.Context) BlueprintMirrorPropertyOutput
}

type BlueprintMirrorPropertyArgs struct {
	Identifier pulumi.StringInput    `pulumi:"identifier"`
	Path       pulumi.StringInput    `pulumi:"path"`
	Title      pulumi.StringPtrInput `pulumi:"title"`
}

func (BlueprintMirrorPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BlueprintMirrorProperty)(nil)).Elem()
}

func (i BlueprintMirrorPropertyArgs) ToBlueprintMirrorPropertyOutput() BlueprintMirrorPropertyOutput {
	return i.ToBlueprintMirrorPropertyOutputWithContext(context.Background())
}

func (i BlueprintMirrorPropertyArgs) ToBlueprintMirrorPropertyOutputWithContext(ctx context.Context) BlueprintMirrorPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlueprintMirrorPropertyOutput)
}

// BlueprintMirrorPropertyArrayInput is an input type that accepts BlueprintMirrorPropertyArray and BlueprintMirrorPropertyArrayOutput values.
// You can construct a concrete instance of `BlueprintMirrorPropertyArrayInput` via:
//
//	BlueprintMirrorPropertyArray{ BlueprintMirrorPropertyArgs{...} }
type BlueprintMirrorPropertyArrayInput interface {
	pulumi.Input

	ToBlueprintMirrorPropertyArrayOutput() BlueprintMirrorPropertyArrayOutput
	ToBlueprintMirrorPropertyArrayOutputWithContext(context.Context) BlueprintMirrorPropertyArrayOutput
}

type BlueprintMirrorPropertyArray []BlueprintMirrorPropertyInput

func (BlueprintMirrorPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BlueprintMirrorProperty)(nil)).Elem()
}

func (i BlueprintMirrorPropertyArray) ToBlueprintMirrorPropertyArrayOutput() BlueprintMirrorPropertyArrayOutput {
	return i.ToBlueprintMirrorPropertyArrayOutputWithContext(context.Background())
}

func (i BlueprintMirrorPropertyArray) ToBlueprintMirrorPropertyArrayOutputWithContext(ctx context.Context) BlueprintMirrorPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlueprintMirrorPropertyArrayOutput)
}

type BlueprintMirrorPropertyOutput struct{ *pulumi.OutputState }

func (BlueprintMirrorPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlueprintMirrorProperty)(nil)).Elem()
}

func (o BlueprintMirrorPropertyOutput) ToBlueprintMirrorPropertyOutput() BlueprintMirrorPropertyOutput {
	return o
}

func (o BlueprintMirrorPropertyOutput) ToBlueprintMirrorPropertyOutputWithContext(ctx context.Context) BlueprintMirrorPropertyOutput {
	return o
}

func (o BlueprintMirrorPropertyOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v BlueprintMirrorProperty) string { return v.Identifier }).(pulumi.StringOutput)
}

func (o BlueprintMirrorPropertyOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v BlueprintMirrorProperty) string { return v.Path }).(pulumi.StringOutput)
}

func (o BlueprintMirrorPropertyOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlueprintMirrorProperty) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type BlueprintMirrorPropertyArrayOutput struct{ *pulumi.OutputState }

func (BlueprintMirrorPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BlueprintMirrorProperty)(nil)).Elem()
}

func (o BlueprintMirrorPropertyArrayOutput) ToBlueprintMirrorPropertyArrayOutput() BlueprintMirrorPropertyArrayOutput {
	return o
}

func (o BlueprintMirrorPropertyArrayOutput) ToBlueprintMirrorPropertyArrayOutputWithContext(ctx context.Context) BlueprintMirrorPropertyArrayOutput {
	return o
}

func (o BlueprintMirrorPropertyArrayOutput) Index(i pulumi.IntInput) BlueprintMirrorPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BlueprintMirrorProperty {
		return vs[0].([]BlueprintMirrorProperty)[vs[1].(int)]
	}).(BlueprintMirrorPropertyOutput)
}

type BlueprintProperty struct {
	Default      *string           `pulumi:"default"`
	DefaultItems []string          `pulumi:"defaultItems"`
	Description  *string           `pulumi:"description"`
	EnumColors   map[string]string `pulumi:"enumColors"`
	Enums        []string          `pulumi:"enums"`
	Format       *string           `pulumi:"format"`
	Icon         *string           `pulumi:"icon"`
	Identifier   string            `pulumi:"identifier"`
	Required     *bool             `pulumi:"required"`
	Spec         *string           `pulumi:"spec"`
	Title        string            `pulumi:"title"`
	Type         string            `pulumi:"type"`
}

// BlueprintPropertyInput is an input type that accepts BlueprintPropertyArgs and BlueprintPropertyOutput values.
// You can construct a concrete instance of `BlueprintPropertyInput` via:
//
//	BlueprintPropertyArgs{...}
type BlueprintPropertyInput interface {
	pulumi.Input

	ToBlueprintPropertyOutput() BlueprintPropertyOutput
	ToBlueprintPropertyOutputWithContext(context.Context) BlueprintPropertyOutput
}

type BlueprintPropertyArgs struct {
	Default      pulumi.StringPtrInput   `pulumi:"default"`
	DefaultItems pulumi.StringArrayInput `pulumi:"defaultItems"`
	Description  pulumi.StringPtrInput   `pulumi:"description"`
	EnumColors   pulumi.StringMapInput   `pulumi:"enumColors"`
	Enums        pulumi.StringArrayInput `pulumi:"enums"`
	Format       pulumi.StringPtrInput   `pulumi:"format"`
	Icon         pulumi.StringPtrInput   `pulumi:"icon"`
	Identifier   pulumi.StringInput      `pulumi:"identifier"`
	Required     pulumi.BoolPtrInput     `pulumi:"required"`
	Spec         pulumi.StringPtrInput   `pulumi:"spec"`
	Title        pulumi.StringInput      `pulumi:"title"`
	Type         pulumi.StringInput      `pulumi:"type"`
}

func (BlueprintPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BlueprintProperty)(nil)).Elem()
}

func (i BlueprintPropertyArgs) ToBlueprintPropertyOutput() BlueprintPropertyOutput {
	return i.ToBlueprintPropertyOutputWithContext(context.Background())
}

func (i BlueprintPropertyArgs) ToBlueprintPropertyOutputWithContext(ctx context.Context) BlueprintPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlueprintPropertyOutput)
}

// BlueprintPropertyArrayInput is an input type that accepts BlueprintPropertyArray and BlueprintPropertyArrayOutput values.
// You can construct a concrete instance of `BlueprintPropertyArrayInput` via:
//
//	BlueprintPropertyArray{ BlueprintPropertyArgs{...} }
type BlueprintPropertyArrayInput interface {
	pulumi.Input

	ToBlueprintPropertyArrayOutput() BlueprintPropertyArrayOutput
	ToBlueprintPropertyArrayOutputWithContext(context.Context) BlueprintPropertyArrayOutput
}

type BlueprintPropertyArray []BlueprintPropertyInput

func (BlueprintPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BlueprintProperty)(nil)).Elem()
}

func (i BlueprintPropertyArray) ToBlueprintPropertyArrayOutput() BlueprintPropertyArrayOutput {
	return i.ToBlueprintPropertyArrayOutputWithContext(context.Background())
}

func (i BlueprintPropertyArray) ToBlueprintPropertyArrayOutputWithContext(ctx context.Context) BlueprintPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlueprintPropertyArrayOutput)
}

type BlueprintPropertyOutput struct{ *pulumi.OutputState }

func (BlueprintPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlueprintProperty)(nil)).Elem()
}

func (o BlueprintPropertyOutput) ToBlueprintPropertyOutput() BlueprintPropertyOutput {
	return o
}

func (o BlueprintPropertyOutput) ToBlueprintPropertyOutputWithContext(ctx context.Context) BlueprintPropertyOutput {
	return o
}

func (o BlueprintPropertyOutput) Default() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlueprintProperty) *string { return v.Default }).(pulumi.StringPtrOutput)
}

func (o BlueprintPropertyOutput) DefaultItems() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BlueprintProperty) []string { return v.DefaultItems }).(pulumi.StringArrayOutput)
}

func (o BlueprintPropertyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlueprintProperty) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o BlueprintPropertyOutput) EnumColors() pulumi.StringMapOutput {
	return o.ApplyT(func(v BlueprintProperty) map[string]string { return v.EnumColors }).(pulumi.StringMapOutput)
}

func (o BlueprintPropertyOutput) Enums() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BlueprintProperty) []string { return v.Enums }).(pulumi.StringArrayOutput)
}

func (o BlueprintPropertyOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlueprintProperty) *string { return v.Format }).(pulumi.StringPtrOutput)
}

func (o BlueprintPropertyOutput) Icon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlueprintProperty) *string { return v.Icon }).(pulumi.StringPtrOutput)
}

func (o BlueprintPropertyOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v BlueprintProperty) string { return v.Identifier }).(pulumi.StringOutput)
}

func (o BlueprintPropertyOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BlueprintProperty) *bool { return v.Required }).(pulumi.BoolPtrOutput)
}

func (o BlueprintPropertyOutput) Spec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlueprintProperty) *string { return v.Spec }).(pulumi.StringPtrOutput)
}

func (o BlueprintPropertyOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v BlueprintProperty) string { return v.Title }).(pulumi.StringOutput)
}

func (o BlueprintPropertyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BlueprintProperty) string { return v.Type }).(pulumi.StringOutput)
}

type BlueprintPropertyArrayOutput struct{ *pulumi.OutputState }

func (BlueprintPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BlueprintProperty)(nil)).Elem()
}

func (o BlueprintPropertyArrayOutput) ToBlueprintPropertyArrayOutput() BlueprintPropertyArrayOutput {
	return o
}

func (o BlueprintPropertyArrayOutput) ToBlueprintPropertyArrayOutputWithContext(ctx context.Context) BlueprintPropertyArrayOutput {
	return o
}

func (o BlueprintPropertyArrayOutput) Index(i pulumi.IntInput) BlueprintPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BlueprintProperty {
		return vs[0].([]BlueprintProperty)[vs[1].(int)]
	}).(BlueprintPropertyOutput)
}

type BlueprintRelation struct {
	Identifier *string `pulumi:"identifier"`
	Many       *bool   `pulumi:"many"`
	Required   *bool   `pulumi:"required"`
	Target     string  `pulumi:"target"`
	Title      string  `pulumi:"title"`
}

// BlueprintRelationInput is an input type that accepts BlueprintRelationArgs and BlueprintRelationOutput values.
// You can construct a concrete instance of `BlueprintRelationInput` via:
//
//	BlueprintRelationArgs{...}
type BlueprintRelationInput interface {
	pulumi.Input

	ToBlueprintRelationOutput() BlueprintRelationOutput
	ToBlueprintRelationOutputWithContext(context.Context) BlueprintRelationOutput
}

type BlueprintRelationArgs struct {
	Identifier pulumi.StringPtrInput `pulumi:"identifier"`
	Many       pulumi.BoolPtrInput   `pulumi:"many"`
	Required   pulumi.BoolPtrInput   `pulumi:"required"`
	Target     pulumi.StringInput    `pulumi:"target"`
	Title      pulumi.StringInput    `pulumi:"title"`
}

func (BlueprintRelationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BlueprintRelation)(nil)).Elem()
}

func (i BlueprintRelationArgs) ToBlueprintRelationOutput() BlueprintRelationOutput {
	return i.ToBlueprintRelationOutputWithContext(context.Background())
}

func (i BlueprintRelationArgs) ToBlueprintRelationOutputWithContext(ctx context.Context) BlueprintRelationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlueprintRelationOutput)
}

// BlueprintRelationArrayInput is an input type that accepts BlueprintRelationArray and BlueprintRelationArrayOutput values.
// You can construct a concrete instance of `BlueprintRelationArrayInput` via:
//
//	BlueprintRelationArray{ BlueprintRelationArgs{...} }
type BlueprintRelationArrayInput interface {
	pulumi.Input

	ToBlueprintRelationArrayOutput() BlueprintRelationArrayOutput
	ToBlueprintRelationArrayOutputWithContext(context.Context) BlueprintRelationArrayOutput
}

type BlueprintRelationArray []BlueprintRelationInput

func (BlueprintRelationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BlueprintRelation)(nil)).Elem()
}

func (i BlueprintRelationArray) ToBlueprintRelationArrayOutput() BlueprintRelationArrayOutput {
	return i.ToBlueprintRelationArrayOutputWithContext(context.Background())
}

func (i BlueprintRelationArray) ToBlueprintRelationArrayOutputWithContext(ctx context.Context) BlueprintRelationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlueprintRelationArrayOutput)
}

type BlueprintRelationOutput struct{ *pulumi.OutputState }

func (BlueprintRelationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlueprintRelation)(nil)).Elem()
}

func (o BlueprintRelationOutput) ToBlueprintRelationOutput() BlueprintRelationOutput {
	return o
}

func (o BlueprintRelationOutput) ToBlueprintRelationOutputWithContext(ctx context.Context) BlueprintRelationOutput {
	return o
}

func (o BlueprintRelationOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlueprintRelation) *string { return v.Identifier }).(pulumi.StringPtrOutput)
}

func (o BlueprintRelationOutput) Many() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BlueprintRelation) *bool { return v.Many }).(pulumi.BoolPtrOutput)
}

func (o BlueprintRelationOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BlueprintRelation) *bool { return v.Required }).(pulumi.BoolPtrOutput)
}

func (o BlueprintRelationOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v BlueprintRelation) string { return v.Target }).(pulumi.StringOutput)
}

func (o BlueprintRelationOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v BlueprintRelation) string { return v.Title }).(pulumi.StringOutput)
}

type BlueprintRelationArrayOutput struct{ *pulumi.OutputState }

func (BlueprintRelationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BlueprintRelation)(nil)).Elem()
}

func (o BlueprintRelationArrayOutput) ToBlueprintRelationArrayOutput() BlueprintRelationArrayOutput {
	return o
}

func (o BlueprintRelationArrayOutput) ToBlueprintRelationArrayOutputWithContext(ctx context.Context) BlueprintRelationArrayOutput {
	return o
}

func (o BlueprintRelationArrayOutput) Index(i pulumi.IntInput) BlueprintRelationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BlueprintRelation {
		return vs[0].([]BlueprintRelation)[vs[1].(int)]
	}).(BlueprintRelationOutput)
}

type EntityProperty struct {
	Items []string `pulumi:"items"`
	Name  string   `pulumi:"name"`
	// Deprecated: property type is not required anymore
	Type  *string `pulumi:"type"`
	Value *string `pulumi:"value"`
}

// EntityPropertyInput is an input type that accepts EntityPropertyArgs and EntityPropertyOutput values.
// You can construct a concrete instance of `EntityPropertyInput` via:
//
//	EntityPropertyArgs{...}
type EntityPropertyInput interface {
	pulumi.Input

	ToEntityPropertyOutput() EntityPropertyOutput
	ToEntityPropertyOutputWithContext(context.Context) EntityPropertyOutput
}

type EntityPropertyArgs struct {
	Items pulumi.StringArrayInput `pulumi:"items"`
	Name  pulumi.StringInput      `pulumi:"name"`
	// Deprecated: property type is not required anymore
	Type  pulumi.StringPtrInput `pulumi:"type"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (EntityPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityProperty)(nil)).Elem()
}

func (i EntityPropertyArgs) ToEntityPropertyOutput() EntityPropertyOutput {
	return i.ToEntityPropertyOutputWithContext(context.Background())
}

func (i EntityPropertyArgs) ToEntityPropertyOutputWithContext(ctx context.Context) EntityPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityPropertyOutput)
}

// EntityPropertyArrayInput is an input type that accepts EntityPropertyArray and EntityPropertyArrayOutput values.
// You can construct a concrete instance of `EntityPropertyArrayInput` via:
//
//	EntityPropertyArray{ EntityPropertyArgs{...} }
type EntityPropertyArrayInput interface {
	pulumi.Input

	ToEntityPropertyArrayOutput() EntityPropertyArrayOutput
	ToEntityPropertyArrayOutputWithContext(context.Context) EntityPropertyArrayOutput
}

type EntityPropertyArray []EntityPropertyInput

func (EntityPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EntityProperty)(nil)).Elem()
}

func (i EntityPropertyArray) ToEntityPropertyArrayOutput() EntityPropertyArrayOutput {
	return i.ToEntityPropertyArrayOutputWithContext(context.Background())
}

func (i EntityPropertyArray) ToEntityPropertyArrayOutputWithContext(ctx context.Context) EntityPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityPropertyArrayOutput)
}

type EntityPropertyOutput struct{ *pulumi.OutputState }

func (EntityPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityProperty)(nil)).Elem()
}

func (o EntityPropertyOutput) ToEntityPropertyOutput() EntityPropertyOutput {
	return o
}

func (o EntityPropertyOutput) ToEntityPropertyOutputWithContext(ctx context.Context) EntityPropertyOutput {
	return o
}

func (o EntityPropertyOutput) Items() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EntityProperty) []string { return v.Items }).(pulumi.StringArrayOutput)
}

func (o EntityPropertyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EntityProperty) string { return v.Name }).(pulumi.StringOutput)
}

// Deprecated: property type is not required anymore
func (o EntityPropertyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityProperty) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o EntityPropertyOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityProperty) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type EntityPropertyArrayOutput struct{ *pulumi.OutputState }

func (EntityPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EntityProperty)(nil)).Elem()
}

func (o EntityPropertyArrayOutput) ToEntityPropertyArrayOutput() EntityPropertyArrayOutput {
	return o
}

func (o EntityPropertyArrayOutput) ToEntityPropertyArrayOutputWithContext(ctx context.Context) EntityPropertyArrayOutput {
	return o
}

func (o EntityPropertyArrayOutput) Index(i pulumi.IntInput) EntityPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EntityProperty {
		return vs[0].([]EntityProperty)[vs[1].(int)]
	}).(EntityPropertyOutput)
}

type EntityRelation struct {
	Identifier string `pulumi:"identifier"`
	Name       string `pulumi:"name"`
}

// EntityRelationInput is an input type that accepts EntityRelationArgs and EntityRelationOutput values.
// You can construct a concrete instance of `EntityRelationInput` via:
//
//	EntityRelationArgs{...}
type EntityRelationInput interface {
	pulumi.Input

	ToEntityRelationOutput() EntityRelationOutput
	ToEntityRelationOutputWithContext(context.Context) EntityRelationOutput
}

type EntityRelationArgs struct {
	Identifier pulumi.StringInput `pulumi:"identifier"`
	Name       pulumi.StringInput `pulumi:"name"`
}

func (EntityRelationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityRelation)(nil)).Elem()
}

func (i EntityRelationArgs) ToEntityRelationOutput() EntityRelationOutput {
	return i.ToEntityRelationOutputWithContext(context.Background())
}

func (i EntityRelationArgs) ToEntityRelationOutputWithContext(ctx context.Context) EntityRelationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityRelationOutput)
}

// EntityRelationArrayInput is an input type that accepts EntityRelationArray and EntityRelationArrayOutput values.
// You can construct a concrete instance of `EntityRelationArrayInput` via:
//
//	EntityRelationArray{ EntityRelationArgs{...} }
type EntityRelationArrayInput interface {
	pulumi.Input

	ToEntityRelationArrayOutput() EntityRelationArrayOutput
	ToEntityRelationArrayOutputWithContext(context.Context) EntityRelationArrayOutput
}

type EntityRelationArray []EntityRelationInput

func (EntityRelationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EntityRelation)(nil)).Elem()
}

func (i EntityRelationArray) ToEntityRelationArrayOutput() EntityRelationArrayOutput {
	return i.ToEntityRelationArrayOutputWithContext(context.Background())
}

func (i EntityRelationArray) ToEntityRelationArrayOutputWithContext(ctx context.Context) EntityRelationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityRelationArrayOutput)
}

type EntityRelationOutput struct{ *pulumi.OutputState }

func (EntityRelationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityRelation)(nil)).Elem()
}

func (o EntityRelationOutput) ToEntityRelationOutput() EntityRelationOutput {
	return o
}

func (o EntityRelationOutput) ToEntityRelationOutputWithContext(ctx context.Context) EntityRelationOutput {
	return o
}

func (o EntityRelationOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v EntityRelation) string { return v.Identifier }).(pulumi.StringOutput)
}

func (o EntityRelationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EntityRelation) string { return v.Name }).(pulumi.StringOutput)
}

type EntityRelationArrayOutput struct{ *pulumi.OutputState }

func (EntityRelationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EntityRelation)(nil)).Elem()
}

func (o EntityRelationArrayOutput) ToEntityRelationArrayOutput() EntityRelationArrayOutput {
	return o
}

func (o EntityRelationArrayOutput) ToEntityRelationArrayOutputWithContext(ctx context.Context) EntityRelationArrayOutput {
	return o
}

func (o EntityRelationArrayOutput) Index(i pulumi.IntInput) EntityRelationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EntityRelation {
		return vs[0].([]EntityRelation)[vs[1].(int)]
	}).(EntityRelationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ActionInvocationMethodInput)(nil)).Elem(), ActionInvocationMethodArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionInvocationMethodPtrInput)(nil)).Elem(), ActionInvocationMethodArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionUserPropertyInput)(nil)).Elem(), ActionUserPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionUserPropertyArrayInput)(nil)).Elem(), ActionUserPropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlueprintCalculationPropertyInput)(nil)).Elem(), BlueprintCalculationPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlueprintCalculationPropertyArrayInput)(nil)).Elem(), BlueprintCalculationPropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlueprintChangelogDestinationInput)(nil)).Elem(), BlueprintChangelogDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlueprintChangelogDestinationPtrInput)(nil)).Elem(), BlueprintChangelogDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlueprintMirrorPropertyInput)(nil)).Elem(), BlueprintMirrorPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlueprintMirrorPropertyArrayInput)(nil)).Elem(), BlueprintMirrorPropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlueprintPropertyInput)(nil)).Elem(), BlueprintPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlueprintPropertyArrayInput)(nil)).Elem(), BlueprintPropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlueprintRelationInput)(nil)).Elem(), BlueprintRelationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlueprintRelationArrayInput)(nil)).Elem(), BlueprintRelationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityPropertyInput)(nil)).Elem(), EntityPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityPropertyArrayInput)(nil)).Elem(), EntityPropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityRelationInput)(nil)).Elem(), EntityRelationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityRelationArrayInput)(nil)).Elem(), EntityRelationArray{})
	pulumi.RegisterOutputType(ActionInvocationMethodOutput{})
	pulumi.RegisterOutputType(ActionInvocationMethodPtrOutput{})
	pulumi.RegisterOutputType(ActionUserPropertyOutput{})
	pulumi.RegisterOutputType(ActionUserPropertyArrayOutput{})
	pulumi.RegisterOutputType(BlueprintCalculationPropertyOutput{})
	pulumi.RegisterOutputType(BlueprintCalculationPropertyArrayOutput{})
	pulumi.RegisterOutputType(BlueprintChangelogDestinationOutput{})
	pulumi.RegisterOutputType(BlueprintChangelogDestinationPtrOutput{})
	pulumi.RegisterOutputType(BlueprintMirrorPropertyOutput{})
	pulumi.RegisterOutputType(BlueprintMirrorPropertyArrayOutput{})
	pulumi.RegisterOutputType(BlueprintPropertyOutput{})
	pulumi.RegisterOutputType(BlueprintPropertyArrayOutput{})
	pulumi.RegisterOutputType(BlueprintRelationOutput{})
	pulumi.RegisterOutputType(BlueprintRelationArrayOutput{})
	pulumi.RegisterOutputType(EntityPropertyOutput{})
	pulumi.RegisterOutputType(EntityPropertyArrayOutput{})
	pulumi.RegisterOutputType(EntityRelationOutput{})
	pulumi.RegisterOutputType(EntityRelationArrayOutput{})
}
