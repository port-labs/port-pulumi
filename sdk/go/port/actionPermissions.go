// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package port

import (
	"context"
	"reflect"

	"errors"
	"github.com/port-labs/pulumi-port/sdk/go/port/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ActionPermissions struct {
	pulumi.CustomResourceState

	// The ID of the action
	ActionIdentifier pulumi.StringOutput `pulumi:"actionIdentifier"`
	// The ID of the blueprint
	BlueprintIdentifier pulumi.StringOutput `pulumi:"blueprintIdentifier"`
	// The permissions for the action
	Permissions ActionPermissionsPermissionsPtrOutput `pulumi:"permissions"`
}

// NewActionPermissions registers a new resource with the given unique name, arguments, and options.
func NewActionPermissions(ctx *pulumi.Context,
	name string, args *ActionPermissionsArgs, opts ...pulumi.ResourceOption) (*ActionPermissions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ActionIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ActionIdentifier'")
	}
	if args.BlueprintIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'BlueprintIdentifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ActionPermissions
	err := ctx.RegisterResource("port:index/actionPermissions:ActionPermissions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetActionPermissions gets an existing ActionPermissions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetActionPermissions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ActionPermissionsState, opts ...pulumi.ResourceOption) (*ActionPermissions, error) {
	var resource ActionPermissions
	err := ctx.ReadResource("port:index/actionPermissions:ActionPermissions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ActionPermissions resources.
type actionPermissionsState struct {
	// The ID of the action
	ActionIdentifier *string `pulumi:"actionIdentifier"`
	// The ID of the blueprint
	BlueprintIdentifier *string `pulumi:"blueprintIdentifier"`
	// The permissions for the action
	Permissions *ActionPermissionsPermissions `pulumi:"permissions"`
}

type ActionPermissionsState struct {
	// The ID of the action
	ActionIdentifier pulumi.StringPtrInput
	// The ID of the blueprint
	BlueprintIdentifier pulumi.StringPtrInput
	// The permissions for the action
	Permissions ActionPermissionsPermissionsPtrInput
}

func (ActionPermissionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*actionPermissionsState)(nil)).Elem()
}

type actionPermissionsArgs struct {
	// The ID of the action
	ActionIdentifier string `pulumi:"actionIdentifier"`
	// The ID of the blueprint
	BlueprintIdentifier string `pulumi:"blueprintIdentifier"`
	// The permissions for the action
	Permissions *ActionPermissionsPermissions `pulumi:"permissions"`
}

// The set of arguments for constructing a ActionPermissions resource.
type ActionPermissionsArgs struct {
	// The ID of the action
	ActionIdentifier pulumi.StringInput
	// The ID of the blueprint
	BlueprintIdentifier pulumi.StringInput
	// The permissions for the action
	Permissions ActionPermissionsPermissionsPtrInput
}

func (ActionPermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*actionPermissionsArgs)(nil)).Elem()
}

type ActionPermissionsInput interface {
	pulumi.Input

	ToActionPermissionsOutput() ActionPermissionsOutput
	ToActionPermissionsOutputWithContext(ctx context.Context) ActionPermissionsOutput
}

func (*ActionPermissions) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionPermissions)(nil)).Elem()
}

func (i *ActionPermissions) ToActionPermissionsOutput() ActionPermissionsOutput {
	return i.ToActionPermissionsOutputWithContext(context.Background())
}

func (i *ActionPermissions) ToActionPermissionsOutputWithContext(ctx context.Context) ActionPermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionPermissionsOutput)
}

// ActionPermissionsArrayInput is an input type that accepts ActionPermissionsArray and ActionPermissionsArrayOutput values.
// You can construct a concrete instance of `ActionPermissionsArrayInput` via:
//
//	ActionPermissionsArray{ ActionPermissionsArgs{...} }
type ActionPermissionsArrayInput interface {
	pulumi.Input

	ToActionPermissionsArrayOutput() ActionPermissionsArrayOutput
	ToActionPermissionsArrayOutputWithContext(context.Context) ActionPermissionsArrayOutput
}

type ActionPermissionsArray []ActionPermissionsInput

func (ActionPermissionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActionPermissions)(nil)).Elem()
}

func (i ActionPermissionsArray) ToActionPermissionsArrayOutput() ActionPermissionsArrayOutput {
	return i.ToActionPermissionsArrayOutputWithContext(context.Background())
}

func (i ActionPermissionsArray) ToActionPermissionsArrayOutputWithContext(ctx context.Context) ActionPermissionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionPermissionsArrayOutput)
}

// ActionPermissionsMapInput is an input type that accepts ActionPermissionsMap and ActionPermissionsMapOutput values.
// You can construct a concrete instance of `ActionPermissionsMapInput` via:
//
//	ActionPermissionsMap{ "key": ActionPermissionsArgs{...} }
type ActionPermissionsMapInput interface {
	pulumi.Input

	ToActionPermissionsMapOutput() ActionPermissionsMapOutput
	ToActionPermissionsMapOutputWithContext(context.Context) ActionPermissionsMapOutput
}

type ActionPermissionsMap map[string]ActionPermissionsInput

func (ActionPermissionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActionPermissions)(nil)).Elem()
}

func (i ActionPermissionsMap) ToActionPermissionsMapOutput() ActionPermissionsMapOutput {
	return i.ToActionPermissionsMapOutputWithContext(context.Background())
}

func (i ActionPermissionsMap) ToActionPermissionsMapOutputWithContext(ctx context.Context) ActionPermissionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionPermissionsMapOutput)
}

type ActionPermissionsOutput struct{ *pulumi.OutputState }

func (ActionPermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionPermissions)(nil)).Elem()
}

func (o ActionPermissionsOutput) ToActionPermissionsOutput() ActionPermissionsOutput {
	return o
}

func (o ActionPermissionsOutput) ToActionPermissionsOutputWithContext(ctx context.Context) ActionPermissionsOutput {
	return o
}

// The ID of the action
func (o ActionPermissionsOutput) ActionIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ActionPermissions) pulumi.StringOutput { return v.ActionIdentifier }).(pulumi.StringOutput)
}

// The ID of the blueprint
func (o ActionPermissionsOutput) BlueprintIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ActionPermissions) pulumi.StringOutput { return v.BlueprintIdentifier }).(pulumi.StringOutput)
}

// The permissions for the action
func (o ActionPermissionsOutput) Permissions() ActionPermissionsPermissionsPtrOutput {
	return o.ApplyT(func(v *ActionPermissions) ActionPermissionsPermissionsPtrOutput { return v.Permissions }).(ActionPermissionsPermissionsPtrOutput)
}

type ActionPermissionsArrayOutput struct{ *pulumi.OutputState }

func (ActionPermissionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActionPermissions)(nil)).Elem()
}

func (o ActionPermissionsArrayOutput) ToActionPermissionsArrayOutput() ActionPermissionsArrayOutput {
	return o
}

func (o ActionPermissionsArrayOutput) ToActionPermissionsArrayOutputWithContext(ctx context.Context) ActionPermissionsArrayOutput {
	return o
}

func (o ActionPermissionsArrayOutput) Index(i pulumi.IntInput) ActionPermissionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ActionPermissions {
		return vs[0].([]*ActionPermissions)[vs[1].(int)]
	}).(ActionPermissionsOutput)
}

type ActionPermissionsMapOutput struct{ *pulumi.OutputState }

func (ActionPermissionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActionPermissions)(nil)).Elem()
}

func (o ActionPermissionsMapOutput) ToActionPermissionsMapOutput() ActionPermissionsMapOutput {
	return o
}

func (o ActionPermissionsMapOutput) ToActionPermissionsMapOutputWithContext(ctx context.Context) ActionPermissionsMapOutput {
	return o
}

func (o ActionPermissionsMapOutput) MapIndex(k pulumi.StringInput) ActionPermissionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ActionPermissions {
		return vs[0].(map[string]*ActionPermissions)[vs[1].(string)]
	}).(ActionPermissionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ActionPermissionsInput)(nil)).Elem(), &ActionPermissions{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionPermissionsArrayInput)(nil)).Elem(), ActionPermissionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionPermissionsMapInput)(nil)).Elem(), ActionPermissionsMap{})
	pulumi.RegisterOutputType(ActionPermissionsOutput{})
	pulumi.RegisterOutputType(ActionPermissionsArrayOutput{})
	pulumi.RegisterOutputType(ActionPermissionsMapOutput{})
}
