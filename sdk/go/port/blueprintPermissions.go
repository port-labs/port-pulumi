// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package port

import (
	"context"
	"reflect"

	"errors"
	"github.com/port-labs/pulumi-port/sdk/v2/go/port/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BlueprintPermissions struct {
	pulumi.CustomResourceState

	BlueprintIdentifier pulumi.StringOutput `pulumi:"blueprintIdentifier"`
	// Entities permissions to read the blueprint
	Entities BlueprintPermissionsEntitiesOutput `pulumi:"entities"`
}

// NewBlueprintPermissions registers a new resource with the given unique name, arguments, and options.
func NewBlueprintPermissions(ctx *pulumi.Context,
	name string, args *BlueprintPermissionsArgs, opts ...pulumi.ResourceOption) (*BlueprintPermissions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BlueprintIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'BlueprintIdentifier'")
	}
	if args.Entities == nil {
		return nil, errors.New("invalid value for required argument 'Entities'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BlueprintPermissions
	err := ctx.RegisterResource("port:index/blueprintPermissions:BlueprintPermissions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBlueprintPermissions gets an existing BlueprintPermissions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBlueprintPermissions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BlueprintPermissionsState, opts ...pulumi.ResourceOption) (*BlueprintPermissions, error) {
	var resource BlueprintPermissions
	err := ctx.ReadResource("port:index/blueprintPermissions:BlueprintPermissions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BlueprintPermissions resources.
type blueprintPermissionsState struct {
	BlueprintIdentifier *string `pulumi:"blueprintIdentifier"`
	// Entities permissions to read the blueprint
	Entities *BlueprintPermissionsEntities `pulumi:"entities"`
}

type BlueprintPermissionsState struct {
	BlueprintIdentifier pulumi.StringPtrInput
	// Entities permissions to read the blueprint
	Entities BlueprintPermissionsEntitiesPtrInput
}

func (BlueprintPermissionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*blueprintPermissionsState)(nil)).Elem()
}

type blueprintPermissionsArgs struct {
	BlueprintIdentifier string `pulumi:"blueprintIdentifier"`
	// Entities permissions to read the blueprint
	Entities BlueprintPermissionsEntities `pulumi:"entities"`
}

// The set of arguments for constructing a BlueprintPermissions resource.
type BlueprintPermissionsArgs struct {
	BlueprintIdentifier pulumi.StringInput
	// Entities permissions to read the blueprint
	Entities BlueprintPermissionsEntitiesInput
}

func (BlueprintPermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*blueprintPermissionsArgs)(nil)).Elem()
}

type BlueprintPermissionsInput interface {
	pulumi.Input

	ToBlueprintPermissionsOutput() BlueprintPermissionsOutput
	ToBlueprintPermissionsOutputWithContext(ctx context.Context) BlueprintPermissionsOutput
}

func (*BlueprintPermissions) ElementType() reflect.Type {
	return reflect.TypeOf((**BlueprintPermissions)(nil)).Elem()
}

func (i *BlueprintPermissions) ToBlueprintPermissionsOutput() BlueprintPermissionsOutput {
	return i.ToBlueprintPermissionsOutputWithContext(context.Background())
}

func (i *BlueprintPermissions) ToBlueprintPermissionsOutputWithContext(ctx context.Context) BlueprintPermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlueprintPermissionsOutput)
}

// BlueprintPermissionsArrayInput is an input type that accepts BlueprintPermissionsArray and BlueprintPermissionsArrayOutput values.
// You can construct a concrete instance of `BlueprintPermissionsArrayInput` via:
//
//	BlueprintPermissionsArray{ BlueprintPermissionsArgs{...} }
type BlueprintPermissionsArrayInput interface {
	pulumi.Input

	ToBlueprintPermissionsArrayOutput() BlueprintPermissionsArrayOutput
	ToBlueprintPermissionsArrayOutputWithContext(context.Context) BlueprintPermissionsArrayOutput
}

type BlueprintPermissionsArray []BlueprintPermissionsInput

func (BlueprintPermissionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BlueprintPermissions)(nil)).Elem()
}

func (i BlueprintPermissionsArray) ToBlueprintPermissionsArrayOutput() BlueprintPermissionsArrayOutput {
	return i.ToBlueprintPermissionsArrayOutputWithContext(context.Background())
}

func (i BlueprintPermissionsArray) ToBlueprintPermissionsArrayOutputWithContext(ctx context.Context) BlueprintPermissionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlueprintPermissionsArrayOutput)
}

// BlueprintPermissionsMapInput is an input type that accepts BlueprintPermissionsMap and BlueprintPermissionsMapOutput values.
// You can construct a concrete instance of `BlueprintPermissionsMapInput` via:
//
//	BlueprintPermissionsMap{ "key": BlueprintPermissionsArgs{...} }
type BlueprintPermissionsMapInput interface {
	pulumi.Input

	ToBlueprintPermissionsMapOutput() BlueprintPermissionsMapOutput
	ToBlueprintPermissionsMapOutputWithContext(context.Context) BlueprintPermissionsMapOutput
}

type BlueprintPermissionsMap map[string]BlueprintPermissionsInput

func (BlueprintPermissionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BlueprintPermissions)(nil)).Elem()
}

func (i BlueprintPermissionsMap) ToBlueprintPermissionsMapOutput() BlueprintPermissionsMapOutput {
	return i.ToBlueprintPermissionsMapOutputWithContext(context.Background())
}

func (i BlueprintPermissionsMap) ToBlueprintPermissionsMapOutputWithContext(ctx context.Context) BlueprintPermissionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlueprintPermissionsMapOutput)
}

type BlueprintPermissionsOutput struct{ *pulumi.OutputState }

func (BlueprintPermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlueprintPermissions)(nil)).Elem()
}

func (o BlueprintPermissionsOutput) ToBlueprintPermissionsOutput() BlueprintPermissionsOutput {
	return o
}

func (o BlueprintPermissionsOutput) ToBlueprintPermissionsOutputWithContext(ctx context.Context) BlueprintPermissionsOutput {
	return o
}

func (o BlueprintPermissionsOutput) BlueprintIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *BlueprintPermissions) pulumi.StringOutput { return v.BlueprintIdentifier }).(pulumi.StringOutput)
}

// Entities permissions to read the blueprint
func (o BlueprintPermissionsOutput) Entities() BlueprintPermissionsEntitiesOutput {
	return o.ApplyT(func(v *BlueprintPermissions) BlueprintPermissionsEntitiesOutput { return v.Entities }).(BlueprintPermissionsEntitiesOutput)
}

type BlueprintPermissionsArrayOutput struct{ *pulumi.OutputState }

func (BlueprintPermissionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BlueprintPermissions)(nil)).Elem()
}

func (o BlueprintPermissionsArrayOutput) ToBlueprintPermissionsArrayOutput() BlueprintPermissionsArrayOutput {
	return o
}

func (o BlueprintPermissionsArrayOutput) ToBlueprintPermissionsArrayOutputWithContext(ctx context.Context) BlueprintPermissionsArrayOutput {
	return o
}

func (o BlueprintPermissionsArrayOutput) Index(i pulumi.IntInput) BlueprintPermissionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BlueprintPermissions {
		return vs[0].([]*BlueprintPermissions)[vs[1].(int)]
	}).(BlueprintPermissionsOutput)
}

type BlueprintPermissionsMapOutput struct{ *pulumi.OutputState }

func (BlueprintPermissionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BlueprintPermissions)(nil)).Elem()
}

func (o BlueprintPermissionsMapOutput) ToBlueprintPermissionsMapOutput() BlueprintPermissionsMapOutput {
	return o
}

func (o BlueprintPermissionsMapOutput) ToBlueprintPermissionsMapOutputWithContext(ctx context.Context) BlueprintPermissionsMapOutput {
	return o
}

func (o BlueprintPermissionsMapOutput) MapIndex(k pulumi.StringInput) BlueprintPermissionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BlueprintPermissions {
		return vs[0].(map[string]*BlueprintPermissions)[vs[1].(string)]
	}).(BlueprintPermissionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BlueprintPermissionsInput)(nil)).Elem(), &BlueprintPermissions{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlueprintPermissionsArrayInput)(nil)).Elem(), BlueprintPermissionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlueprintPermissionsMapInput)(nil)).Elem(), BlueprintPermissionsMap{})
	pulumi.RegisterOutputType(BlueprintPermissionsOutput{})
	pulumi.RegisterOutputType(BlueprintPermissionsArrayOutput{})
	pulumi.RegisterOutputType(BlueprintPermissionsMapOutput{})
}
