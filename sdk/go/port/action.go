// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package port

import (
	"context"
	"reflect"

	"errors"
	"github.com/port-labs/pulumi-port/sdk/go/port/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type Action struct {
	pulumi.CustomResourceState

	// The email notification of the approval
	ApprovalEmailNotification ActionApprovalEmailNotificationPtrOutput `pulumi:"approvalEmailNotification"`
	// The webhook notification of the approval
	ApprovalWebhookNotification ActionApprovalWebhookNotificationPtrOutput `pulumi:"approvalWebhookNotification"`
	// The invocation method of the action
	AzureMethod ActionAzureMethodPtrOutput `pulumi:"azureMethod"`
	// The blueprint identifier the action relates to
	Blueprint pulumi.StringOutput `pulumi:"blueprint"`
	// Description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The invocation method of the action
	GithubMethod ActionGithubMethodPtrOutput `pulumi:"githubMethod"`
	// The invocation method of the action
	GitlabMethod ActionGitlabMethodPtrOutput `pulumi:"gitlabMethod"`
	// Icon
	Icon pulumi.StringPtrOutput `pulumi:"icon"`
	// Identifier
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// The invocation method of the action
	KafkaMethod ActionKafkaMethodPtrOutput `pulumi:"kafkaMethod"`
	// Order properties
	OrderProperties pulumi.StringArrayOutput `pulumi:"orderProperties"`
	// Require approval before invoking the action
	RequiredApproval pulumi.BoolPtrOutput `pulumi:"requiredApproval"`
	// Title
	Title pulumi.StringOutput `pulumi:"title"`
	// The trigger type of the action
	Trigger pulumi.StringOutput `pulumi:"trigger"`
	// User properties
	UserProperties ActionUserPropertiesPtrOutput `pulumi:"userProperties"`
	// The invocation method of the action
	WebhookMethod ActionWebhookMethodPtrOutput `pulumi:"webhookMethod"`
}

// NewAction registers a new resource with the given unique name, arguments, and options.
func NewAction(ctx *pulumi.Context,
	name string, args *ActionArgs, opts ...pulumi.ResourceOption) (*Action, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Blueprint == nil {
		return nil, errors.New("invalid value for required argument 'Blueprint'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	if args.Trigger == nil {
		return nil, errors.New("invalid value for required argument 'Trigger'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Action
	err := ctx.RegisterResource("port:index/action:Action", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAction gets an existing Action resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ActionState, opts ...pulumi.ResourceOption) (*Action, error) {
	var resource Action
	err := ctx.ReadResource("port:index/action:Action", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Action resources.
type actionState struct {
	// The email notification of the approval
	ApprovalEmailNotification *ActionApprovalEmailNotification `pulumi:"approvalEmailNotification"`
	// The webhook notification of the approval
	ApprovalWebhookNotification *ActionApprovalWebhookNotification `pulumi:"approvalWebhookNotification"`
	// The invocation method of the action
	AzureMethod *ActionAzureMethod `pulumi:"azureMethod"`
	// The blueprint identifier the action relates to
	Blueprint *string `pulumi:"blueprint"`
	// Description
	Description *string `pulumi:"description"`
	// The invocation method of the action
	GithubMethod *ActionGithubMethod `pulumi:"githubMethod"`
	// The invocation method of the action
	GitlabMethod *ActionGitlabMethod `pulumi:"gitlabMethod"`
	// Icon
	Icon *string `pulumi:"icon"`
	// Identifier
	Identifier *string `pulumi:"identifier"`
	// The invocation method of the action
	KafkaMethod *ActionKafkaMethod `pulumi:"kafkaMethod"`
	// Order properties
	OrderProperties []string `pulumi:"orderProperties"`
	// Require approval before invoking the action
	RequiredApproval *bool `pulumi:"requiredApproval"`
	// Title
	Title *string `pulumi:"title"`
	// The trigger type of the action
	Trigger *string `pulumi:"trigger"`
	// User properties
	UserProperties *ActionUserProperties `pulumi:"userProperties"`
	// The invocation method of the action
	WebhookMethod *ActionWebhookMethod `pulumi:"webhookMethod"`
}

type ActionState struct {
	// The email notification of the approval
	ApprovalEmailNotification ActionApprovalEmailNotificationPtrInput
	// The webhook notification of the approval
	ApprovalWebhookNotification ActionApprovalWebhookNotificationPtrInput
	// The invocation method of the action
	AzureMethod ActionAzureMethodPtrInput
	// The blueprint identifier the action relates to
	Blueprint pulumi.StringPtrInput
	// Description
	Description pulumi.StringPtrInput
	// The invocation method of the action
	GithubMethod ActionGithubMethodPtrInput
	// The invocation method of the action
	GitlabMethod ActionGitlabMethodPtrInput
	// Icon
	Icon pulumi.StringPtrInput
	// Identifier
	Identifier pulumi.StringPtrInput
	// The invocation method of the action
	KafkaMethod ActionKafkaMethodPtrInput
	// Order properties
	OrderProperties pulumi.StringArrayInput
	// Require approval before invoking the action
	RequiredApproval pulumi.BoolPtrInput
	// Title
	Title pulumi.StringPtrInput
	// The trigger type of the action
	Trigger pulumi.StringPtrInput
	// User properties
	UserProperties ActionUserPropertiesPtrInput
	// The invocation method of the action
	WebhookMethod ActionWebhookMethodPtrInput
}

func (ActionState) ElementType() reflect.Type {
	return reflect.TypeOf((*actionState)(nil)).Elem()
}

type actionArgs struct {
	// The email notification of the approval
	ApprovalEmailNotification *ActionApprovalEmailNotification `pulumi:"approvalEmailNotification"`
	// The webhook notification of the approval
	ApprovalWebhookNotification *ActionApprovalWebhookNotification `pulumi:"approvalWebhookNotification"`
	// The invocation method of the action
	AzureMethod *ActionAzureMethod `pulumi:"azureMethod"`
	// The blueprint identifier the action relates to
	Blueprint string `pulumi:"blueprint"`
	// Description
	Description *string `pulumi:"description"`
	// The invocation method of the action
	GithubMethod *ActionGithubMethod `pulumi:"githubMethod"`
	// The invocation method of the action
	GitlabMethod *ActionGitlabMethod `pulumi:"gitlabMethod"`
	// Icon
	Icon *string `pulumi:"icon"`
	// Identifier
	Identifier string `pulumi:"identifier"`
	// The invocation method of the action
	KafkaMethod *ActionKafkaMethod `pulumi:"kafkaMethod"`
	// Order properties
	OrderProperties []string `pulumi:"orderProperties"`
	// Require approval before invoking the action
	RequiredApproval *bool `pulumi:"requiredApproval"`
	// Title
	Title string `pulumi:"title"`
	// The trigger type of the action
	Trigger string `pulumi:"trigger"`
	// User properties
	UserProperties *ActionUserProperties `pulumi:"userProperties"`
	// The invocation method of the action
	WebhookMethod *ActionWebhookMethod `pulumi:"webhookMethod"`
}

// The set of arguments for constructing a Action resource.
type ActionArgs struct {
	// The email notification of the approval
	ApprovalEmailNotification ActionApprovalEmailNotificationPtrInput
	// The webhook notification of the approval
	ApprovalWebhookNotification ActionApprovalWebhookNotificationPtrInput
	// The invocation method of the action
	AzureMethod ActionAzureMethodPtrInput
	// The blueprint identifier the action relates to
	Blueprint pulumi.StringInput
	// Description
	Description pulumi.StringPtrInput
	// The invocation method of the action
	GithubMethod ActionGithubMethodPtrInput
	// The invocation method of the action
	GitlabMethod ActionGitlabMethodPtrInput
	// Icon
	Icon pulumi.StringPtrInput
	// Identifier
	Identifier pulumi.StringInput
	// The invocation method of the action
	KafkaMethod ActionKafkaMethodPtrInput
	// Order properties
	OrderProperties pulumi.StringArrayInput
	// Require approval before invoking the action
	RequiredApproval pulumi.BoolPtrInput
	// Title
	Title pulumi.StringInput
	// The trigger type of the action
	Trigger pulumi.StringInput
	// User properties
	UserProperties ActionUserPropertiesPtrInput
	// The invocation method of the action
	WebhookMethod ActionWebhookMethodPtrInput
}

func (ActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*actionArgs)(nil)).Elem()
}

type ActionInput interface {
	pulumi.Input

	ToActionOutput() ActionOutput
	ToActionOutputWithContext(ctx context.Context) ActionOutput
}

func (*Action) ElementType() reflect.Type {
	return reflect.TypeOf((**Action)(nil)).Elem()
}

func (i *Action) ToActionOutput() ActionOutput {
	return i.ToActionOutputWithContext(context.Background())
}

func (i *Action) ToActionOutputWithContext(ctx context.Context) ActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionOutput)
}

func (i *Action) ToOutput(ctx context.Context) pulumix.Output[*Action] {
	return pulumix.Output[*Action]{
		OutputState: i.ToActionOutputWithContext(ctx).OutputState,
	}
}

// ActionArrayInput is an input type that accepts ActionArray and ActionArrayOutput values.
// You can construct a concrete instance of `ActionArrayInput` via:
//
//	ActionArray{ ActionArgs{...} }
type ActionArrayInput interface {
	pulumi.Input

	ToActionArrayOutput() ActionArrayOutput
	ToActionArrayOutputWithContext(context.Context) ActionArrayOutput
}

type ActionArray []ActionInput

func (ActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Action)(nil)).Elem()
}

func (i ActionArray) ToActionArrayOutput() ActionArrayOutput {
	return i.ToActionArrayOutputWithContext(context.Background())
}

func (i ActionArray) ToActionArrayOutputWithContext(ctx context.Context) ActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionArrayOutput)
}

func (i ActionArray) ToOutput(ctx context.Context) pulumix.Output[[]*Action] {
	return pulumix.Output[[]*Action]{
		OutputState: i.ToActionArrayOutputWithContext(ctx).OutputState,
	}
}

// ActionMapInput is an input type that accepts ActionMap and ActionMapOutput values.
// You can construct a concrete instance of `ActionMapInput` via:
//
//	ActionMap{ "key": ActionArgs{...} }
type ActionMapInput interface {
	pulumi.Input

	ToActionMapOutput() ActionMapOutput
	ToActionMapOutputWithContext(context.Context) ActionMapOutput
}

type ActionMap map[string]ActionInput

func (ActionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Action)(nil)).Elem()
}

func (i ActionMap) ToActionMapOutput() ActionMapOutput {
	return i.ToActionMapOutputWithContext(context.Background())
}

func (i ActionMap) ToActionMapOutputWithContext(ctx context.Context) ActionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionMapOutput)
}

func (i ActionMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Action] {
	return pulumix.Output[map[string]*Action]{
		OutputState: i.ToActionMapOutputWithContext(ctx).OutputState,
	}
}

type ActionOutput struct{ *pulumi.OutputState }

func (ActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Action)(nil)).Elem()
}

func (o ActionOutput) ToActionOutput() ActionOutput {
	return o
}

func (o ActionOutput) ToActionOutputWithContext(ctx context.Context) ActionOutput {
	return o
}

func (o ActionOutput) ToOutput(ctx context.Context) pulumix.Output[*Action] {
	return pulumix.Output[*Action]{
		OutputState: o.OutputState,
	}
}

// The email notification of the approval
func (o ActionOutput) ApprovalEmailNotification() ActionApprovalEmailNotificationPtrOutput {
	return o.ApplyT(func(v *Action) ActionApprovalEmailNotificationPtrOutput { return v.ApprovalEmailNotification }).(ActionApprovalEmailNotificationPtrOutput)
}

// The webhook notification of the approval
func (o ActionOutput) ApprovalWebhookNotification() ActionApprovalWebhookNotificationPtrOutput {
	return o.ApplyT(func(v *Action) ActionApprovalWebhookNotificationPtrOutput { return v.ApprovalWebhookNotification }).(ActionApprovalWebhookNotificationPtrOutput)
}

// The invocation method of the action
func (o ActionOutput) AzureMethod() ActionAzureMethodPtrOutput {
	return o.ApplyT(func(v *Action) ActionAzureMethodPtrOutput { return v.AzureMethod }).(ActionAzureMethodPtrOutput)
}

// The blueprint identifier the action relates to
func (o ActionOutput) Blueprint() pulumi.StringOutput {
	return o.ApplyT(func(v *Action) pulumi.StringOutput { return v.Blueprint }).(pulumi.StringOutput)
}

// Description
func (o ActionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Action) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The invocation method of the action
func (o ActionOutput) GithubMethod() ActionGithubMethodPtrOutput {
	return o.ApplyT(func(v *Action) ActionGithubMethodPtrOutput { return v.GithubMethod }).(ActionGithubMethodPtrOutput)
}

// The invocation method of the action
func (o ActionOutput) GitlabMethod() ActionGitlabMethodPtrOutput {
	return o.ApplyT(func(v *Action) ActionGitlabMethodPtrOutput { return v.GitlabMethod }).(ActionGitlabMethodPtrOutput)
}

// Icon
func (o ActionOutput) Icon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Action) pulumi.StringPtrOutput { return v.Icon }).(pulumi.StringPtrOutput)
}

// Identifier
func (o ActionOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Action) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// The invocation method of the action
func (o ActionOutput) KafkaMethod() ActionKafkaMethodPtrOutput {
	return o.ApplyT(func(v *Action) ActionKafkaMethodPtrOutput { return v.KafkaMethod }).(ActionKafkaMethodPtrOutput)
}

// Order properties
func (o ActionOutput) OrderProperties() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Action) pulumi.StringArrayOutput { return v.OrderProperties }).(pulumi.StringArrayOutput)
}

// Require approval before invoking the action
func (o ActionOutput) RequiredApproval() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Action) pulumi.BoolPtrOutput { return v.RequiredApproval }).(pulumi.BoolPtrOutput)
}

// Title
func (o ActionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *Action) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// The trigger type of the action
func (o ActionOutput) Trigger() pulumi.StringOutput {
	return o.ApplyT(func(v *Action) pulumi.StringOutput { return v.Trigger }).(pulumi.StringOutput)
}

// User properties
func (o ActionOutput) UserProperties() ActionUserPropertiesPtrOutput {
	return o.ApplyT(func(v *Action) ActionUserPropertiesPtrOutput { return v.UserProperties }).(ActionUserPropertiesPtrOutput)
}

// The invocation method of the action
func (o ActionOutput) WebhookMethod() ActionWebhookMethodPtrOutput {
	return o.ApplyT(func(v *Action) ActionWebhookMethodPtrOutput { return v.WebhookMethod }).(ActionWebhookMethodPtrOutput)
}

type ActionArrayOutput struct{ *pulumi.OutputState }

func (ActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Action)(nil)).Elem()
}

func (o ActionArrayOutput) ToActionArrayOutput() ActionArrayOutput {
	return o
}

func (o ActionArrayOutput) ToActionArrayOutputWithContext(ctx context.Context) ActionArrayOutput {
	return o
}

func (o ActionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Action] {
	return pulumix.Output[[]*Action]{
		OutputState: o.OutputState,
	}
}

func (o ActionArrayOutput) Index(i pulumi.IntInput) ActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Action {
		return vs[0].([]*Action)[vs[1].(int)]
	}).(ActionOutput)
}

type ActionMapOutput struct{ *pulumi.OutputState }

func (ActionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Action)(nil)).Elem()
}

func (o ActionMapOutput) ToActionMapOutput() ActionMapOutput {
	return o
}

func (o ActionMapOutput) ToActionMapOutputWithContext(ctx context.Context) ActionMapOutput {
	return o
}

func (o ActionMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Action] {
	return pulumix.Output[map[string]*Action]{
		OutputState: o.OutputState,
	}
}

func (o ActionMapOutput) MapIndex(k pulumi.StringInput) ActionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Action {
		return vs[0].(map[string]*Action)[vs[1].(string)]
	}).(ActionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ActionInput)(nil)).Elem(), &Action{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionArrayInput)(nil)).Elem(), ActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionMapInput)(nil)).Elem(), ActionMap{})
	pulumi.RegisterOutputType(ActionOutput{})
	pulumi.RegisterOutputType(ActionArrayOutput{})
	pulumi.RegisterOutputType(ActionMapOutput{})
}
