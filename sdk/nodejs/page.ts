// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Page extends pulumi.CustomResource {
    /**
     * Get an existing Page resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PageState, opts?: pulumi.CustomResourceOptions): Page {
        return new Page(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'port:index/page:Page';

    /**
     * Returns true if the given object is an instance of Page.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Page {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Page.__pulumiType;
    }

    /**
     * The identifier of the page/folder after which the page should be placed
     */
    public readonly after!: pulumi.Output<string | undefined>;
    /**
     * The blueprint for which the page is created, relevant only for pages of type "blueprint-entities"
     */
    public readonly blueprint!: pulumi.Output<string | undefined>;
    /**
     * The creation date of the page
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The creator of the page
     */
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    /**
     * The page description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The icon of the page
     */
    public readonly icon!: pulumi.Output<string | undefined>;
    /**
     * The Identifier of the page
     */
    public readonly identifier!: pulumi.Output<string>;
    /**
     * Whether the page is locked, if true, viewers will not be able to edit the page widgets and filters
     */
    public readonly locked!: pulumi.Output<boolean | undefined>;
    /**
     * The identifier of the folder in which the page is in, default is the root of the sidebar
     */
    public readonly parent!: pulumi.Output<string | undefined>;
    /**
     * The title of the page
     */
    public readonly title!: pulumi.Output<string | undefined>;
    /**
     * The type of the page, can be one of "blueprint-entities", "dashboard" or "home"
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The last update date of the page
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The last updater of the page
     */
    public /*out*/ readonly updatedBy!: pulumi.Output<string>;
    /**
     * The widgets of the page
     */
    public readonly widgets!: pulumi.Output<string[] | undefined>;

    /**
     * Create a Page resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PageArgs | PageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PageState | undefined;
            resourceInputs["after"] = state ? state.after : undefined;
            resourceInputs["blueprint"] = state ? state.blueprint : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["icon"] = state ? state.icon : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["locked"] = state ? state.locked : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["updatedBy"] = state ? state.updatedBy : undefined;
            resourceInputs["widgets"] = state ? state.widgets : undefined;
        } else {
            const args = argsOrState as PageArgs | undefined;
            if ((!args || args.identifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["after"] = args ? args.after : undefined;
            resourceInputs["blueprint"] = args ? args.blueprint : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["icon"] = args ? args.icon : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["locked"] = args ? args.locked : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["widgets"] = args ? args.widgets : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["updatedBy"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Page.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Page resources.
 */
export interface PageState {
    /**
     * The identifier of the page/folder after which the page should be placed
     */
    after?: pulumi.Input<string>;
    /**
     * The blueprint for which the page is created, relevant only for pages of type "blueprint-entities"
     */
    blueprint?: pulumi.Input<string>;
    /**
     * The creation date of the page
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The creator of the page
     */
    createdBy?: pulumi.Input<string>;
    /**
     * The page description
     */
    description?: pulumi.Input<string>;
    /**
     * The icon of the page
     */
    icon?: pulumi.Input<string>;
    /**
     * The Identifier of the page
     */
    identifier?: pulumi.Input<string>;
    /**
     * Whether the page is locked, if true, viewers will not be able to edit the page widgets and filters
     */
    locked?: pulumi.Input<boolean>;
    /**
     * The identifier of the folder in which the page is in, default is the root of the sidebar
     */
    parent?: pulumi.Input<string>;
    /**
     * The title of the page
     */
    title?: pulumi.Input<string>;
    /**
     * The type of the page, can be one of "blueprint-entities", "dashboard" or "home"
     */
    type?: pulumi.Input<string>;
    /**
     * The last update date of the page
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The last updater of the page
     */
    updatedBy?: pulumi.Input<string>;
    /**
     * The widgets of the page
     */
    widgets?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Page resource.
 */
export interface PageArgs {
    /**
     * The identifier of the page/folder after which the page should be placed
     */
    after?: pulumi.Input<string>;
    /**
     * The blueprint for which the page is created, relevant only for pages of type "blueprint-entities"
     */
    blueprint?: pulumi.Input<string>;
    /**
     * The page description
     */
    description?: pulumi.Input<string>;
    /**
     * The icon of the page
     */
    icon?: pulumi.Input<string>;
    /**
     * The Identifier of the page
     */
    identifier: pulumi.Input<string>;
    /**
     * Whether the page is locked, if true, viewers will not be able to edit the page widgets and filters
     */
    locked?: pulumi.Input<boolean>;
    /**
     * The identifier of the folder in which the page is in, default is the root of the sidebar
     */
    parent?: pulumi.Input<string>;
    /**
     * The title of the page
     */
    title?: pulumi.Input<string>;
    /**
     * The type of the page, can be one of "blueprint-entities", "dashboard" or "home"
     */
    type: pulumi.Input<string>;
    /**
     * The widgets of the page
     */
    widgets?: pulumi.Input<pulumi.Input<string>[]>;
}
