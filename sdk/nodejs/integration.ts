// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * **NOTE:** This resource manages existing integration and integration mappings, not for creating new integrations.
 *
 * Docs about integrations can be found [here](https://docs.getport.io/integrations-index/).
 *
 * Docs about how to import existing integrations and manage their mappings can be found [here](https://docs.getport.io/guides/all/import-and-manage-integration).
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as port from "@pulumi/port";
 *
 * const myCustomIntegration = new port.index.Port_integration("myCustomIntegration", {
 *     installationId: "my-custom-integration-id",
 *     title: "My Custom Integration",
 *     config: JSON.stringify({
 *         createMissingRelatedEntitiesboolean: true,
 *         deleteDependentEntities: true,
 *         resources: [{
 *             kind: "my-custom-kind",
 *             selector: {
 *                 query: ".title",
 *             },
 *             port: {
 *                 entity: {
 *                     mappings: [{
 *                         identifier: "'my-identifier'",
 *                         title: ".title",
 *                         blueprint: "'my-blueprint'",
 *                         properties: {
 *                             my_property: 123,
 *                         },
 *                         relations: {},
 *                     }],
 *                 },
 *             },
 *         }],
 *     }),
 * });
 * ```
 */
export class Integration extends pulumi.CustomResource {
    /**
     * Get an existing Integration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationState, opts?: pulumi.CustomResourceOptions): Integration {
        return new Integration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'port:index/integration:Integration';

    /**
     * Returns true if the given object is an instance of Integration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Integration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Integration.__pulumiType;
    }

    /**
     * Integration Config Raw JSON string (use `jsonencode`)
     */
    public readonly config!: pulumi.Output<string | undefined>;
    public readonly installationAppType!: pulumi.Output<string | undefined>;
    public readonly installationId!: pulumi.Output<string>;
    /**
     * The changelog destination of the blueprint (just an empty `{}`)
     */
    public readonly kafkaChangelogDestination!: pulumi.Output<outputs.IntegrationKafkaChangelogDestination | undefined>;
    public readonly title!: pulumi.Output<string | undefined>;
    public readonly version!: pulumi.Output<string>;
    /**
     * The webhook changelog destination of the integration
     */
    public readonly webhookChangelogDestination!: pulumi.Output<outputs.IntegrationWebhookChangelogDestination | undefined>;

    /**
     * Create a Integration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationArgs | IntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["installationAppType"] = state ? state.installationAppType : undefined;
            resourceInputs["installationId"] = state ? state.installationId : undefined;
            resourceInputs["kafkaChangelogDestination"] = state ? state.kafkaChangelogDestination : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["webhookChangelogDestination"] = state ? state.webhookChangelogDestination : undefined;
        } else {
            const args = argsOrState as IntegrationArgs | undefined;
            if ((!args || args.installationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'installationId'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["installationAppType"] = args ? args.installationAppType : undefined;
            resourceInputs["installationId"] = args ? args.installationId : undefined;
            resourceInputs["kafkaChangelogDestination"] = args ? args.kafkaChangelogDestination : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["webhookChangelogDestination"] = args ? args.webhookChangelogDestination : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Integration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Integration resources.
 */
export interface IntegrationState {
    /**
     * Integration Config Raw JSON string (use `jsonencode`)
     */
    config?: pulumi.Input<string>;
    installationAppType?: pulumi.Input<string>;
    installationId?: pulumi.Input<string>;
    /**
     * The changelog destination of the blueprint (just an empty `{}`)
     */
    kafkaChangelogDestination?: pulumi.Input<inputs.IntegrationKafkaChangelogDestination>;
    title?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
    /**
     * The webhook changelog destination of the integration
     */
    webhookChangelogDestination?: pulumi.Input<inputs.IntegrationWebhookChangelogDestination>;
}

/**
 * The set of arguments for constructing a Integration resource.
 */
export interface IntegrationArgs {
    /**
     * Integration Config Raw JSON string (use `jsonencode`)
     */
    config?: pulumi.Input<string>;
    installationAppType?: pulumi.Input<string>;
    installationId: pulumi.Input<string>;
    /**
     * The changelog destination of the blueprint (just an empty `{}`)
     */
    kafkaChangelogDestination?: pulumi.Input<inputs.IntegrationKafkaChangelogDestination>;
    title?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
    /**
     * The webhook changelog destination of the integration
     */
    webhookChangelogDestination?: pulumi.Input<inputs.IntegrationWebhookChangelogDestination>;
}
