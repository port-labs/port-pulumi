// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Action extends pulumi.CustomResource {
    /**
     * Get an existing Action resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ActionState, opts?: pulumi.CustomResourceOptions): Action {
        return new Action(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'port:index/action:Action';

    /**
     * Returns true if the given object is an instance of Action.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Action {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Action.__pulumiType;
    }

    /**
     * The identifier of the blueprint
     */
    public readonly blueprintIdentifier!: pulumi.Output<string>;
    /**
     * The description of the action
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The icon of the action
     */
    public readonly icon!: pulumi.Output<string | undefined>;
    /**
     * The identifier of the action
     */
    public readonly identifier!: pulumi.Output<string>;
    /**
     * The methods the action is dispatched in. Supports WEBHOOK, KAFKA, GITHUB and AZURE-DEVOPS
     */
    public readonly invocationMethod!: pulumi.Output<outputs.ActionInvocationMethod>;
    /**
     * The display name of the action
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * The type of the action, one of CREATE, DAY-2, DELETE
     */
    public readonly trigger!: pulumi.Output<string>;
    /**
     * The input properties of the action
     */
    public readonly userProperties!: pulumi.Output<outputs.ActionUserProperty[] | undefined>;

    /**
     * Create a Action resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ActionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ActionArgs | ActionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ActionState | undefined;
            resourceInputs["blueprintIdentifier"] = state ? state.blueprintIdentifier : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["icon"] = state ? state.icon : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["invocationMethod"] = state ? state.invocationMethod : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["trigger"] = state ? state.trigger : undefined;
            resourceInputs["userProperties"] = state ? state.userProperties : undefined;
        } else {
            const args = argsOrState as ActionArgs | undefined;
            if ((!args || args.blueprintIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blueprintIdentifier'");
            }
            if ((!args || args.identifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if ((!args || args.invocationMethod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'invocationMethod'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            if ((!args || args.trigger === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trigger'");
            }
            resourceInputs["blueprintIdentifier"] = args ? args.blueprintIdentifier : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["icon"] = args ? args.icon : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["invocationMethod"] = args ? args.invocationMethod : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["trigger"] = args ? args.trigger : undefined;
            resourceInputs["userProperties"] = args ? args.userProperties : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Action.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Action resources.
 */
export interface ActionState {
    /**
     * The identifier of the blueprint
     */
    blueprintIdentifier?: pulumi.Input<string>;
    /**
     * The description of the action
     */
    description?: pulumi.Input<string>;
    /**
     * The icon of the action
     */
    icon?: pulumi.Input<string>;
    /**
     * The identifier of the action
     */
    identifier?: pulumi.Input<string>;
    /**
     * The methods the action is dispatched in. Supports WEBHOOK, KAFKA, GITHUB and AZURE-DEVOPS
     */
    invocationMethod?: pulumi.Input<inputs.ActionInvocationMethod>;
    /**
     * The display name of the action
     */
    title?: pulumi.Input<string>;
    /**
     * The type of the action, one of CREATE, DAY-2, DELETE
     */
    trigger?: pulumi.Input<string>;
    /**
     * The input properties of the action
     */
    userProperties?: pulumi.Input<pulumi.Input<inputs.ActionUserProperty>[]>;
}

/**
 * The set of arguments for constructing a Action resource.
 */
export interface ActionArgs {
    /**
     * The identifier of the blueprint
     */
    blueprintIdentifier: pulumi.Input<string>;
    /**
     * The description of the action
     */
    description?: pulumi.Input<string>;
    /**
     * The icon of the action
     */
    icon?: pulumi.Input<string>;
    /**
     * The identifier of the action
     */
    identifier: pulumi.Input<string>;
    /**
     * The methods the action is dispatched in. Supports WEBHOOK, KAFKA, GITHUB and AZURE-DEVOPS
     */
    invocationMethod: pulumi.Input<inputs.ActionInvocationMethod>;
    /**
     * The display name of the action
     */
    title: pulumi.Input<string>;
    /**
     * The type of the action, one of CREATE, DAY-2, DELETE
     */
    trigger: pulumi.Input<string>;
    /**
     * The input properties of the action
     */
    userProperties?: pulumi.Input<pulumi.Input<inputs.ActionUserProperty>[]>;
}
