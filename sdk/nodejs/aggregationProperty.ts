// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AggregationProperty extends pulumi.CustomResource {
    /**
     * Get an existing AggregationProperty resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AggregationPropertyState, opts?: pulumi.CustomResourceOptions): AggregationProperty {
        return new AggregationProperty(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'port:index/aggregationProperty:AggregationProperty';

    /**
     * Returns true if the given object is an instance of AggregationProperty.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AggregationProperty {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AggregationProperty.__pulumiType;
    }

    /**
     * The identifier of the aggregation property in the blueprint
     */
    public readonly aggregationIdentifier!: pulumi.Output<string>;
    /**
     * The identifier of the blueprint the aggregation property will be added to
     */
    public readonly blueprintIdentifier!: pulumi.Output<string>;
    /**
     * The description of the aggregation property
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The icon of the aggregation property
     */
    public readonly icon!: pulumi.Output<string | undefined>;
    /**
     * The aggregation method to perform on the target blueprint, one of count_entities, average_entities, average_by_property,
     * aggregate_by_property
     */
    public readonly method!: pulumi.Output<outputs.AggregationPropertyMethod>;
    /**
     * Query to filter the target entities
     */
    public readonly query!: pulumi.Output<string | undefined>;
    /**
     * The identifier of the blueprint to perform the aggregation on
     */
    public readonly targetBlueprintIdentifier!: pulumi.Output<string>;
    /**
     * The title of the aggregation property
     */
    public readonly title!: pulumi.Output<string | undefined>;

    /**
     * Create a AggregationProperty resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AggregationPropertyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AggregationPropertyArgs | AggregationPropertyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AggregationPropertyState | undefined;
            resourceInputs["aggregationIdentifier"] = state ? state.aggregationIdentifier : undefined;
            resourceInputs["blueprintIdentifier"] = state ? state.blueprintIdentifier : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["icon"] = state ? state.icon : undefined;
            resourceInputs["method"] = state ? state.method : undefined;
            resourceInputs["query"] = state ? state.query : undefined;
            resourceInputs["targetBlueprintIdentifier"] = state ? state.targetBlueprintIdentifier : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
        } else {
            const args = argsOrState as AggregationPropertyArgs | undefined;
            if ((!args || args.aggregationIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aggregationIdentifier'");
            }
            if ((!args || args.blueprintIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blueprintIdentifier'");
            }
            if ((!args || args.method === undefined) && !opts.urn) {
                throw new Error("Missing required property 'method'");
            }
            if ((!args || args.targetBlueprintIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetBlueprintIdentifier'");
            }
            resourceInputs["aggregationIdentifier"] = args ? args.aggregationIdentifier : undefined;
            resourceInputs["blueprintIdentifier"] = args ? args.blueprintIdentifier : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["icon"] = args ? args.icon : undefined;
            resourceInputs["method"] = args ? args.method : undefined;
            resourceInputs["query"] = args ? args.query : undefined;
            resourceInputs["targetBlueprintIdentifier"] = args ? args.targetBlueprintIdentifier : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AggregationProperty.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AggregationProperty resources.
 */
export interface AggregationPropertyState {
    /**
     * The identifier of the aggregation property in the blueprint
     */
    aggregationIdentifier?: pulumi.Input<string>;
    /**
     * The identifier of the blueprint the aggregation property will be added to
     */
    blueprintIdentifier?: pulumi.Input<string>;
    /**
     * The description of the aggregation property
     */
    description?: pulumi.Input<string>;
    /**
     * The icon of the aggregation property
     */
    icon?: pulumi.Input<string>;
    /**
     * The aggregation method to perform on the target blueprint, one of count_entities, average_entities, average_by_property,
     * aggregate_by_property
     */
    method?: pulumi.Input<inputs.AggregationPropertyMethod>;
    /**
     * Query to filter the target entities
     */
    query?: pulumi.Input<string>;
    /**
     * The identifier of the blueprint to perform the aggregation on
     */
    targetBlueprintIdentifier?: pulumi.Input<string>;
    /**
     * The title of the aggregation property
     */
    title?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AggregationProperty resource.
 */
export interface AggregationPropertyArgs {
    /**
     * The identifier of the aggregation property in the blueprint
     */
    aggregationIdentifier: pulumi.Input<string>;
    /**
     * The identifier of the blueprint the aggregation property will be added to
     */
    blueprintIdentifier: pulumi.Input<string>;
    /**
     * The description of the aggregation property
     */
    description?: pulumi.Input<string>;
    /**
     * The icon of the aggregation property
     */
    icon?: pulumi.Input<string>;
    /**
     * The aggregation method to perform on the target blueprint, one of count_entities, average_entities, average_by_property,
     * aggregate_by_property
     */
    method: pulumi.Input<inputs.AggregationPropertyMethod>;
    /**
     * Query to filter the target entities
     */
    query?: pulumi.Input<string>;
    /**
     * The identifier of the blueprint to perform the aggregation on
     */
    targetBlueprintIdentifier: pulumi.Input<string>;
    /**
     * The title of the aggregation property
     */
    title?: pulumi.Input<string>;
}
